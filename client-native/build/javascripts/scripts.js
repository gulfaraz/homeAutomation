!function(){angular.module("home",["common"]).config(["$stateProvider","$urlRouterProvider",function(e,t){t.otherwise("/"),e.state("home",{url:"/",templateUrl:"home.html",controller:"HomeCtrl"})}]).controller("HomeCtrl",["$scope","$http","TerminalService","$state",function(e,t,n,o){var r=document.querySelector("#dialog");e.fetchTerminals=function(){var t={userName:e.userName,password:e.password};n.fetchTerminals(t).then(function(t){t.data.terminals.length?(n.setTerminals(t.data.terminals),o.go("device")):(e.message="No Terminals Available",r.showModal())},function(t){e.message=t.data?t.data.message:"Server Unavailable",r.showModal()})},e.closeDialog=function(){r.close(),e.message=""}}])}(),function(){angular.module("common",["ui.router"]).constant("settings",{serverAddress:"raidms.com:8080",deviceServerAddress:"192.168.4.1",deviceNetworkPrefix:"HomeConnect-",deviceNetworkPassword:"setupnewdevice",requestTimeout:3e3,networkScanInterval:6e4,deviceScanInterval:3e3}).constant("resolve",{terminals:["$q","TerminalService",function(e,t){var n=e.defer();return t.getTerminals().length>0?n.resolve():n.reject({go:"home"}),n.promise}],network:["$q","ConfigurationService",function(e,t){var n=e.defer(),o=t.getCredentials();return o.ssid&&o.ssid.length>0?n.resolve():n.reject({go:"network"}),n.promise}],device:["$q","DeviceService","settings",function(e,t,n){var o=e.defer();return e.race([t.getDeviceConfiguration(),new Promise(function(e,t){setTimeout(t,n.requestTimeout)})]).then(function(e){o.resolve()},function(e){o.reject({go:"device"})}),o.promise}]}).factory("DeviceService",["$http","settings",function(e,t){function n(n,o){return e({method:"POST",url:"http://"+t.deviceServerAddress+"/",data:{homeCredentials:n,deviceIdList:o}})}function o(){return e({method:"GET",url:"http://"+t.deviceServerAddress+"/"})}function r(){return e({method:"PUT",url:"http://"+t.deviceServerAddress+"/?s",data:{}})}function i(n){return e({method:"PUT",url:"http://"+t.deviceServerAddress+"/",data:n})}function s(n){return e({method:"GET",url:"http://"+t.deviceServerAddress+"/?i="+n})}return{configureDevice:n,getDeviceConfiguration:o,scanNetworks:r,testNetwork:i,testSwitch:s}}]).factory("TerminalService",["$http","settings",function(e,t){function n(e){i=e}function o(){return i}function r(n){return e({method:"POST",url:"http://"+t.serverAddress+"/device/terminals",data:n})}var i=[];return{setTerminals:n,getTerminals:o,fetchTerminals:r}}]).factory("ConfigurationService",[function(){function e(){return n}function t(e){return n=e}var n={ssid:null,password:null};return{getCredentials:e,setCredentials:t}}]).factory("NetworkService",["settings",function(e){function t(t){r.scanForWiFi(function(n,o){if(n)t(n);else{var r=(o.networks,function(e){var t=[];for(var n in e){var o=!0,r=e[n];for(var i in t){var s=t[i];if(s.ssid===r.ssid){o=!1;break}}o&&t.push(r)}return t}(o.networks));t(null,r.filter(function(t){return 0===t.ssid.indexOf(e.deviceNetworkPrefix)}))}})}function n(t,n){r.connectToAP({ssid:t,password:e.deviceNetworkPassword},function(e,o){if(e)n(e);else{var i=r.getIfaceState();o.success&&i.ssid===t?n(null,t):n("Failed to connect to "+(t||"device"))}})}function o(e,t){r.connectToAP({ssid:e.ssid,password:e.password},function(n,o){if(n)t(n);else{var i=r.getIfaceState();o.success&&i.ssid===e.ssid?t(null,e.ssid):t("Failed to connect to "+(e.ssid||"network"))}})}var r=require("wifi-control");return r.init(),{find:t,connect:n,restore:o}}]).directive("timeSince",["$timeout",function(e){return{restrict:"A",link:function(t,n,o,r){function i(t){e.cancel(c),c=e(function(){n.html(s(new Date(o.timeSince)))},t)}function s(e){var t=Math.floor((new Date-e)/1e3),n=Math.floor(t/31536e3),o="";return n>=1?(i(7776e6-50),o=n+" year"+(n>1?"s":"")+" ago"):(n=Math.floor(t/2592e3),n>=1?(i(1296e6-50),o=n+" month"+(n>1?"s":"")+" ago"):(n=Math.floor(t/86400),n>=1?(i(86399950),o=n+" day"+(n>1?"s":"")+" ago"):(n=Math.floor(t/3600),n>=1?(i(3599950),o=n+" hour"+(n>1?"s":"")+" ago"):(n=Math.floor(t/60),n>=1?(i(59950),o=n+" minute"+(n>1?"s":"")+" ago"):(i(950),o=Math.floor(t)+" seconds ago"))))),o}var c;i(0)}}}])}(),function(){angular.module("app",["home","manage","network","device"]).controller("AppCtrl",["$scope","TerminalService","$state","$rootScope","$timeout",function(e,t,n,o,r){var i=function(e){var t=document.querySelectorAll(".mdl-layout__tab");angular.forEach(t,function(t,n){t=angular.element(t),t.removeClass("is-active"),t.hasClass(e+"-tab")&&t.addClass("is-active")})};e.goTo=function(e){n.go(e,{},{reload:!0})},o.$on("$stateChangeStart",function(t,n,o,i,s){r(function(){e.loading=!0})}),o.$on("$stateChangeSuccess",function(t,n,o,s,c){r(function(){i(s.name),e.currentState=n,componentHandler.upgradeAllRegistered(),e.loading=!1})}),o.$on("$stateChangeError",function(t,n,o,r,i,s){s.go&&(e.goTo(s.go),e.loading=!1)})}])}(),function(){angular.module("device",["common"]).config(["$stateProvider","$urlRouterProvider","resolve",function(e,t,n){t.otherwise("/"),e.state("device",{url:"/device",templateUrl:"device.html",controller:"DeviceCtrl",resolve:{terminals:n.terminals}})}]).controller("DeviceCtrl",["$scope","NetworkService","$timeout","$state","settings",function(e,t,n,o,r){var i=document.querySelector("#dialog");e.scanMessage="Scanning...",e.scanDevices=function(){e.timeoutInstance&&n.cancel(e.timeoutInstance),e.scanMessage="Scanning...",e.scanning=!0,t.find(function(t,o){t&&(e.scanMessage=t,console.error(t)),n(function(){e.scanning=!1,e.devices=o,e.devices.length>0?e.scanMessage=e.devices.length+" Device"+(o.length>1?"s":"")+" Found":e.scanMessage="No Devices Found"})}),e.timeoutInstance=n(function(){e.scanDevices()},r.deviceScanInterval)},e.scanDevices(),e.connectDevice=function(n){e.selectedDevice=n,e.message=null,t.connect(n,function(t,n){t?(e.message="Could not connect to device",console.error(t),i.showModal()):(e.message=null,o.go("network"))})},e.closeDialog=function(){i.close(),e.message=""}}])}(),function(){angular.module("manage",["common"]).config(["$stateProvider","$urlRouterProvider","resolve",function(e,t,n){t.otherwise("/"),e.state("manage",{url:"/manage",templateUrl:"manage.html",controller:"ManageCtrl",resolve:n})}]).controller("ManageCtrl",["$scope","TerminalService","NetworkService","ConfigurationService","DeviceService","$timeout","$state",function(e,t,n,o,r,i,s){e.terminalList=t.getTerminals(),e.homeCredentials=o.getCredentials(),e.deviceIdList=[],e.switchList=[],r.getDeviceConfiguration().then(function(t){e.switchList.length=t.data.switchCount,e.deviceIdList=t.data.deviceIdList},function(e){s.go("network")}),e.getTerminalProperty=function(t,n){var o=n?n.split("/")[2]:null,r=null;if(o)for(var i in e.terminalList){var s=e.terminalList[i];if(s.terminalId===o){r=s[t];break}}return r},e.setupDevice=function(e,t){t=t.map(function(e,t){return e?e:"//"}),r.configureDevice(e,t).then(function(t){console.log("Configuration Success"),n.restore(e,function(e,t){s.go("home")})},function(e){console.log("Configuration Failed")})},e.toggleSwitch=function(e){r.testSwitch(e).then(function(e){console.log("Switch is turned "+(1===e.data.state?"on":"off"))},function(e){console.log("Unable to access switch")})}}])}(),function(){angular.module("network",["common"]).config(["$stateProvider","$urlRouterProvider","resolve",function(e,t,n){t.otherwise("/"),e.state("network",{url:"/network",templateUrl:"network.html",controller:"NetworkCtrl",resolve:{terminals:n.terminals,device:n.device}})}]).controller("NetworkCtrl",["$scope","DeviceService","ConfigurationService","$timeout","$state","settings",function(e,t,n,o,r,i){e.scanMessage="Scanning...",e.credentials=n.getCredentials();var s=document.querySelector("#networkPasswordDialog");e.changeNetwork=function(){e.scanNetworks()},e.scanNetworks=function(){e.timeoutInstance&&o.cancel(e.timeoutInstance),e.scanMessage="Scanning...",e.scanning=!0,t.scanNetworks().then(function(t){e.scanning=!1,e.networks=t.data,e.networks.length>0?e.scanMessage=e.networks.length+" Network"+(e.networks.length>1?"s":"")+" Found":e.scanMessage="No Networks Found"},function(t){e.scanMessage="Failed to scan networks",console.error(t)}),e.timeoutInstance=o(function(){e.scanNetworks()},i.networkScanInterval)},e.scanNetworks(),e.openNetworkPasswordModal=function(t){e.selectedNetwork=t,e.connectMessage=null,s.showModal()},e.testNetwork=function(o){var i={ssid:e.selectedNetwork,password:o};t.testNetwork(i).then(function(t){e.connectMessage=null,e.credentials=n.setCredentials(i),r.go("manage")},function(t){e.connectMessage="Unable to connect to network, verify password",console.error(t)})},e.closeNetworkPasswordDialog=function(){e.password="",e.connectMessage=null,s.close()}}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
