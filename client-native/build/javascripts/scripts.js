!function(){angular.module("home",["common"]).config(["$stateProvider","$urlRouterProvider",function(e,n){n.otherwise("/"),e.state("home",{url:"/",templateUrl:"home.html",controller:"HomeCtrl"})}]).controller("HomeCtrl",["$scope","$http","TerminalService","$state",function(e,n,t,o){var r=document.querySelector("#dialog");e.fetchTerminals=function(){var n={userName:e.userName,password:e.password};t.fetchTerminals(n).then(function(n){n.data.terminals.length?(t.setTerminals(n.data.terminals),o.go("network")):(e.message="No Terminals Available",r.showModal())},function(n){e.message=n.data.message,r.showModal()})},e.closeDialog=function(){r.close(),e.message=""}}])}(),function(){angular.module("common",["ui.router"]).constant("resolve",{terminals:["$q","TerminalService",function(e,n){var t=e.defer();return n.getTerminals().length>0?t.resolve():t.reject({go:"home"}),t.promise}],network:["$q","NetworkService",function(e,n){var t=e.defer(),o=n.getCredentials();return o.ssid&&o.ssid.length>0?t.resolve():t.reject({go:"network"}),t.promise}],device:["$q","TerminalService","$timeout",function(e,n,t){var o=e.defer();return e.race([n.getDeviceConfiguration(),new Promise(function(e,n){setTimeout(n,3e3)})]).then(function(e){o.resolve()},function(e){o.reject({go:"device"})}),o.promise}]})}(),function(){angular.module("app",["home","manage","network","device"]).controller("AppCtrl",["$scope","TerminalService","$state","$rootScope","$timeout",function(e,n,t,o,r){var i=function(e){var n=document.querySelectorAll(".mdl-layout__tab");angular.forEach(n,function(n,t){n=angular.element(n),n.removeClass("is-active"),n.hasClass(e+"-tab")&&n.addClass("is-active")})};e.goTo=function(e){t.go(e,{},{reload:!0})},o.$on("$stateChangeStart",function(n,t,o,i,s){r(function(){e.loading=!0})}),o.$on("$stateChangeSuccess",function(n,t,o,s,c){r(function(){i(s.name),e.currentState=t,componentHandler.upgradeAllRegistered(),e.loading=!1})}),o.$on("$stateChangeError",function(n,t,o,r,i,s){s.go&&(e.goTo(s.go),e.loading=!1)})}]).factory("TerminalService",["$http",function(e){function n(e){c=e}function t(){return c}function o(n){return e({method:"POST",url:"http://localhost:8080/device/terminals",data:n})}function r(n,t){return e({method:"POST",url:"http://192.168.4.1/configure",data:{homeCredentials:n,deviceIdList:t}})}function i(){return e({method:"GET",url:"http://192.168.4.1/"})}function s(n){return e({method:"GET",url:"http://192.168.4.1/?i="+n})}var c=[];return{setTerminals:n,getTerminals:t,fetchTerminals:o,configureDevice:r,getDeviceConfiguration:i,testSwitch:s}}]).factory("NetworkService",[function(){function e(e,n,t){if(t||(t=function(){}),"NONE"===e.security||n){var i={ssid:e.ssid,password:n};o.connectToAP(i,function(i,s){if(i)t(i);else{var c=o.getIfaceState();s.success&&c.ssid===e.ssid?(e.ssid.indexOf("newDevice-")===-1&&(r={ssid:e.ssid,password:n}),t(null,r)):t("failed")}})}else t("password")}function n(){return r}function t(e,n){o.scanForWiFi(function(t,o){if(t)n(t);else{var r=(o.networks,function(e){var n=[];for(var t in e){var o=!0,r=e[t];for(var i in n){var s=n[i];if(s.ssid===r.ssid){o=!1;break}}o&&n.push(r)}return n}(o.networks));n(null,r.filter(function(n){var t=0===n.ssid.indexOf("newDevice-");return e===t}))}})}var o=require("wifi-control");o.init();var r={ssid:null,password:null};return{find:t,connect:e,getCredentials:n}}]).directive("timeSince",["$timeout",function(e){return{restrict:"A",link:function(n,t,o,r){function i(n){e.cancel(c),c=e(function(){t.html(s(new Date(o.timeSince)))},n)}function s(e){var n=Math.floor((new Date-e)/1e3),t=Math.floor(n/31536e3),o="";return t>=1?(i(7776e6-50),o=t+" year"+(t>1?"s":"")+" ago"):(t=Math.floor(n/2592e3),t>=1?(i(1296e6-50),o=t+" month"+(t>1?"s":"")+" ago"):(t=Math.floor(n/86400),t>=1?(i(86399950),o=t+" day"+(t>1?"s":"")+" ago"):(t=Math.floor(n/3600),t>=1?(i(3599950),o=t+" hour"+(t>1?"s":"")+" ago"):(t=Math.floor(n/60),t>=1?(i(59950),o=t+" minute"+(t>1?"s":"")+" ago"):(i(950),o=Math.floor(n)+" seconds ago"))))),o}var c;i(0)}}}])}(),function(){angular.module("device",["common"]).config(["$stateProvider","$urlRouterProvider","resolve",function(e,n,t){n.otherwise("/"),e.state("device",{url:"/device",templateUrl:"device.html",controller:"DeviceCtrl",resolve:{terminals:t.terminals,network:t.network}})}]).controller("DeviceCtrl",["$scope","NetworkService","$timeout","$state",function(e,n,t,o){e.scanMessage="Scanning...",e.scanDevices=function(){e.timeoutInstance&&t.cancel(e.timeoutInstance),e.scanMessage="Scanning...",e.scanning=!0,n.find(!0,function(n,o){n&&(e.scanMessage=n,console.error(n)),t(function(){e.scanning=!1,e.devices=o,e.devices.length>0?e.scanMessage=e.devices.length+" Device"+(o.length>1?"s":"")+" Found":e.scanMessage="No Devices Found"})}),e.timeoutInstance=t(function(){e.scanDevices()},3e3)},e.scanDevices(),e.connectDevice=function(r){e.selectedDevice=r,e.connectMessage=null,n.connect(r,"setupnewdevice",function(i,s){if(i){"failed"===i?e.connectMessage="Failed to connect to "+(r.ssid||"device"):(e.connectMessage="Unable to connect to device, hold the reset button and try again",console.error(i));var c=n.getCredentials();n.connect({ssid:c.ssid},c.password)}else t(function(){e.connectMessage=null,o.go("manage")})})}}])}(),function(){angular.module("manage",["common"]).config(["$stateProvider","$urlRouterProvider","resolve",function(e,n,t){n.otherwise("/"),e.state("manage",{url:"/manage",templateUrl:"manage.html",controller:"ManageCtrl",resolve:t})}]).controller("ManageCtrl",["$scope","TerminalService","NetworkService","$timeout","$state",function(e,n,t,o,r){e.terminalList=n.getTerminals(),e.homeCredentials=t.getCredentials(),e.deviceIdList=[],e.switchList=[],n.getDeviceConfiguration().then(function(n){e.switchList.length=n.data.switchCount,e.deviceIdList=n.data.deviceIdList},function(e){r.go("device")}),e.getTerminalProperty=function(n,t){var o=t?t.split("/")[2]:null,r=null;if(o)for(var i in e.terminalList){var s=e.terminalList[i];if(s.terminalId===o){r=s[n];break}}return r},e.setupDevice=function(e,o){o=o.map(function(e,n){return e?e:"//"}),n.configureDevice(e,o).then(function(n){console.log("Configuration Success"),t.connect({ssid:e.ssid},e.password,function(e,n){r.go("home")})},function(e){console.log("Configuration Failed")})},e.toggleSwitch=function(e){n.testSwitch(e).then(function(e){console.log("Switch is turned "+(1===e.data.state?"on":"off"))},function(e){console.log("Unable to access switch")})}}])}(),function(){angular.module("network",["common"]).config(["$stateProvider","$urlRouterProvider","resolve",function(e,n,t){n.otherwise("/"),e.state("network",{url:"/network",templateUrl:"network.html",controller:"NetworkCtrl",resolve:{terminals:t.terminals}})}]).controller("NetworkCtrl",["$scope","NetworkService","$timeout","$state",function(e,n,t,o){e.scanMessage="Scanning...",e.credentials=n.getCredentials();var r=document.querySelector("#networkPasswordDialog");e.changeNetwork=function(){e.scanNetworks()},e.scanNetworks=function(){e.timeoutInstance&&t.cancel(e.timeoutInstance),e.scanMessage="Scanning...",e.scanning=!0,n.find(!1,function(n,o){n&&(e.scanMessage=n,console.error(n)),t(function(){e.scanning=!1,e.networks=o,e.networks.length>0?e.scanMessage=e.networks.length+" Network"+(e.networks.length>1?"s":"")+" Found":e.scanMessage="No Networks Found"})}),e.timeoutInstance=t(function(){e.scanNetworks()},3e3)},e.scanNetworks(),e.selectNetwork=function(i,s){e.selectedNetwork=i,e.connectMessage=null,n.connect(i,s,function(n,s){n?"password"===n?r.showModal():"failed"===n?e.connectMessage="Failed to connect to "+(i.ssid||"network"):(e.connectMessage="Unable to connect to network, verify password",console.error(n)):t(function(){e.connectMessage=null,e.credentials=s,o.go("device")})})},e.closeNetworkPasswordDialog=function(){e.password="",e.connectMessage=null,r.close()}}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
