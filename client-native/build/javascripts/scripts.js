!function(){angular.module("home",["ui.router"]).config(["$stateProvider","$urlRouterProvider",function(e,n){n.otherwise("/"),e.state("home",{url:"/",templateUrl:"home.html",controller:"HomeCtrl"})}]).controller("HomeCtrl",["$scope","$http","TerminalService","$state",function(e,n,o,t){e.fetchTerminals=function(){var n={userName:e.userName,password:e.password};o.fetchTerminals(n).then(function(e){e.data.terminals.length&&(o.setTerminals(e.data.terminals),t.go("manage"))}).finally(function(n){e.message=n.data.message})}}])}(),function(){angular.module("app",["home","manage"]).controller("AppCtrl",["$scope",function(e){e.title="Setup New Device"}]).factory("TerminalService",["$http",function(e){function n(e){s=e}function o(){return s}function t(n){return e({method:"POST",url:"http://localhost:8080/device/free",data:n})}function r(n,o){return e({method:"POST",url:"http://192.168.4.1/configure",data:{homeCredentials:n,deviceId:o}})}var s=[];return{setTerminals:n,getTerminals:o,fetchTerminals:t,configureTerminal:r}}])}(),function(){angular.module("manage",["ui.router"]).config(["$stateProvider","$urlRouterProvider",function(e,n){n.otherwise("/"),e.state("manage",{url:"/",templateUrl:"manage.html",controller:"ManageCtrl"})}]).controller("ManageCtrl",["$scope","TerminalService","$timeout",function(e,n,o){var t=require("wifi-control");t.init(),e.terminals=n.getTerminals(),e.scanMessage="Looking for networks...",e.selectedTerminal=null,e.homeNetwork={isSet:!1,configuring:!1,credentials:{ssid:null,password:null},set:function(){this.configuring=!0,e.scanNetworks()}},e.configureTerminal=function(n){e.configuring=!0,e.selectedTerminal=n,e.scanNetworks()},e.changeTerminal=function(n){e.configuring=!1,e.selectedTerminal=null,e.scanning=!1,e.networks=null,e.scanMessage="Looking for networks..."},e.scanNetworks=function(){e.scanning=!0,t.scanForWiFi(function(n,t){n&&console.error(n),o(function(){e.scanning=!1,e.networks=t.networks,e.scanMessage="No Networks Found"})})},e.connectNetwork=function(n,r,s){if(e.connectMessage=null,"Open"===n.security||r||n.ssid===e.getPassword)if("Open"===n.security||r){var i={ssid:n.ssid,password:r};t.connectToAP(i,function(i,a){i&&console.error(i),o(function(){var o=t.getIfaceState();a.success&&o.ssid===n.ssid?s(n,r):e.connectMessage="Failed to connect to "+(n.ssid||"network")})})}else e.connectMessage="Enter network password";else e.getPassword=n.ssid},e.configureTerminalCallback=function(){e.getPassword=null,e.connectMessage=null,e.linking=!0,e.closeLinkModal=!1,e.linkMessage="Linking device to terminal...";var r=[e.selectedTerminal.homeId,e.selectedTerminal.roomId,e.selectedTerminal.terminalId];n.configureTerminal(e.homeNetwork.credentials,r).then(function(e){console.log("Configuration Success")},function(e){console.log("Configuration Failed")}).finally(function(n){var r="Success/Failure in link";n?n.data&&n.data.message&&(r=n.data.message):r="Please check if you've connected to the correct network",e.linkMessage=r,e.closeLinkModal=!0,t.connectToAP(networkCredentials,function(n,r){n&&console.error(n),o(function(){var n=t.getIfaceState();r.success&&n.ssid===network.ssid?callback(network,password):e.connectMessage="Failed to connect to "+(network.ssid||"network")})})})},e.setHomeNetworkCallback=function(n,o){e.getPassword=null,e.connectMessage=null,e.homeNetwork.credentials={ssid:n.ssid,password:o},e.homeNetwork.isSet=!0,e.homeNetwork.configuring=!1},e.closeLinking=function(n){e.linking=!1}}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
