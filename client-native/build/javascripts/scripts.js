!function(){angular.module("home",["ui.router"]).config(["$stateProvider","$urlRouterProvider",function(e,n){n.otherwise("/"),e.state("home",{url:"/",templateUrl:"home.html",controller:"HomeCtrl"})}]).controller("HomeCtrl",["$scope","$http","TerminalService","$state",function(e,n,t,o){e.fetchTerminals=function(){var n={userName:e.userName,password:e.password};t.fetchTerminals(n).then(function(n){n.data.terminals.length?(t.setTerminals(n.data.terminals),o.go("network")):e.message="No Terminals Available"},function(n){e.message=n.data.message})}}])}(),function(){angular.module("app",["home","manage","network","device"]).controller("AppCtrl",["$scope",function(e){e.title="Setup New Device"}]).factory("TerminalService",["$http",function(e){function n(e){c=e}function t(){return c}function o(n){return e({method:"POST",url:"http://localhost:8080/device/free",data:n})}function r(n,t){return e({method:"POST",url:"http://192.168.4.1/configure",data:{homeCredentials:n,deviceIdList:t}})}function i(){return e({method:"GET",url:"http://192.168.4.1/"})}function s(n){return e({method:"GET",url:"http://192.168.4.1/?i="+n})}var c=[];return{setTerminals:n,getTerminals:t,fetchTerminals:o,configureDevice:r,getDeviceConfiguration:i,testSwitch:s}}]).factory("NetworkService",[function(){function e(e,n,t){if(t||(t=function(){}),"Open"===e.security||n){var i={ssid:e.ssid,password:n};o.connectToAP(i,function(i,s){if(i)t(i);else{var c=o.getIfaceState();s.success&&c.ssid===e.ssid?(e.ssid.indexOf("newDevice-")===-1&&(r={ssid:e.ssid,password:n}),t(null,r)):t("failed")}})}else t("password")}function n(){return r}function t(e,n){o.scanForWiFi(function(t,o){if(t)n(t);else{var r=(o.networks,function(e){var n=[];for(var t in e){var o=!0,r=e[t];for(var i in n){var s=n[i];if(s.ssid===r.ssid){o=!1;break}}o&&n.push(r)}return n}(o.networks));n(null,r.filter(function(n){var t=0===n.ssid.indexOf("newDevice-");return e===t}))}})}var o=require("wifi-control");o.init();var r={ssid:null,password:null};return{find:t,connect:e,getCredentials:n}}])}(),function(){angular.module("device",["ui.router"]).config(["$stateProvider","$urlRouterProvider",function(e,n){n.otherwise("/"),e.state("device",{url:"/device",templateUrl:"device.html",controller:"DeviceCtrl"})}]).controller("DeviceCtrl",["$scope","NetworkService","$timeout","$state",function(e,n,t,o){e.scanMessage="Looking for devices...",e.scanDevices=function(){e.scanning=!0,n.find(!0,function(n,o){n&&(e.scanMessage=n,console.error(n)),t(function(){e.scanning=!1,e.devices=o,e.scanMessage="No Devices Found"})})},e.scanDevices(),e.connectDevice=function(r,i){e.connectMessage=null,n.connect(r,i,function(i,s){if(i){"password"===i?e.getPassword===r.ssid?e.connectMessage="Enter device password":e.getPassword=r.ssid:"failed"===i?e.connectMessage="Failed to connect to "+(r.ssid||"device"):(e.connectMessage="Unable to connect to device, verify password",console.error(i));var c=n.getCredentials();n.connect({ssid:c.ssid},c.password)}else t(function(){e.getPassword=null,e.connectMessage=null,o.go("manage")})})}}])}(),function(){angular.module("manage",["ui.router"]).config(["$stateProvider","$urlRouterProvider",function(e,n){n.otherwise("/"),e.state("manage",{url:"/manage",templateUrl:"manage.html",controller:"ManageCtrl"})}]).controller("ManageCtrl",["$scope","TerminalService","NetworkService","$timeout","$state",function(e,n,t,o,r){e.terminalList=n.getTerminals(),0===e.terminalList.length&&(alert("You do not have any terminals to configure"),r.go("home")),e.homeCredentials=t.getCredentials(),e.deviceIdList=[],e.switchList=[],n.getDeviceConfiguration().then(function(n){e.switchList.length=n.data.switchCount,e.deviceIdList=n.data.deviceIdList},function(n){e.message="Please check if you have connected to the correct device"}),e.getTerminalProperty=function(n,t){var o=t?t.split("/")[2]:null,r=null;if(o)for(var i in e.terminalList){var s=e.terminalList[i];if(s.terminalId===o){r=s[n];break}}return r},e.setupDevice=function(e,o){o=o.map(function(e,n){return e?e:"//"}),n.configureDevice(e,o).then(function(n){console.log("Configuration Success"),t.connect({ssid:e.ssid},e.password,function(e,n){r.go("home")})},function(e){console.log("Configuration Failed")})},e.toggleSwitch=function(e){n.testSwitch(e).then(function(e){console.log("Switch is turned "+(1===e.data.state?"on":"off"))},function(e){console.log("Unable to access switch")})}}])}(),function(){angular.module("network",["ui.router"]).config(["$stateProvider","$urlRouterProvider",function(e,n){n.otherwise("/"),e.state("network",{url:"/network",templateUrl:"network.html",controller:"NetworkCtrl"})}]).controller("NetworkCtrl",["$scope","NetworkService","$timeout","$state",function(e,n,t,o){e.scanMessage="Looking for networks...",e.credentials=n.getCredentials(),e.changeNetwork=function(){e.showNetworkList=!0,e.scanNetworks()},e.scanNetworks=function(){e.scanning=!0,n.find(!1,function(n,o){n&&(e.scanMessage=n,console.error(n)),t(function(){e.scanning=!1,e.networks=o,e.scanMessage="No Networks Found"})})},e.selectNetwork=function(r,i){e.connectMessage=null,n.connect(r,i,function(n,i){n?"password"===n?e.getPassword===r.ssid?e.connectMessage="Enter network password":e.getPassword=r.ssid:"failed"===n?e.connectMessage="Failed to connect to "+(r.ssid||"network"):(e.connectMessage="Unable to connect to network, verify password",console.error(n)):t(function(){e.getPassword=null,e.connectMessage=null,e.credentials=i,e.showNetworkList=!1,o.go("device")})})}}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
