!function(){angular.module("home",["common"]).config(["$stateProvider","$urlRouterProvider",function(e,n){n.otherwise("/"),e.state("home",{url:"/",templateUrl:"home.html",controller:"HomeCtrl"})}]).controller("HomeCtrl",["$scope","$http","TerminalService","$state",function(e,n,t,o){var r=document.querySelector("#dialog");e.fetchTerminals=function(){var n={userName:e.userName,password:e.password};t.fetchTerminals(n).then(function(n){n.data.terminals.length?(t.setTerminals(n.data.terminals),o.go("device")):(e.message="No Terminals Available",r.showModal())},function(n){e.message=n.data?n.data.message:"Server Unavailable",r.showModal()})},e.closeDialog=function(){r.close(),e.message=""}}])}(),function(){angular.module("common",["ui.router"]).constant("settings",{serverAddress:"raidms.com:8080",deviceServerAddress:"192.168.4.1",deviceNetworkPrefix:"HomeConnect-",deviceNetworkPassword:"setupnewdevice",requestTimeout:3e3,networkScanInterval:6e4,deviceScanInterval:3e3}).constant("resolve",{terminals:["$q","TerminalService",function(e,n){var t=e.defer();return n.getTerminals().length>0?t.resolve():t.reject({go:"home"}),t.promise}],network:["$q","ConfigurationService",function(e,n){var t=e.defer(),o=n.getCredentials();return o.ssid&&o.ssid.length>0?t.resolve():t.reject({go:"network"}),t.promise}],device:["$q","DeviceService","settings",function(e,n,t){var o=e.defer();return e.race([n.getDeviceConfiguration(),new Promise(function(e,n){setTimeout(n,t.requestTimeout)})]).then(function(e){o.resolve()},function(e){o.reject({go:"device"})}),o.promise}]}).factory("DeviceService",["$http","settings",function(e,n){function t(t,o){return e({method:"POST",url:"http://"+n.deviceServerAddress+"/",data:{homeCredentials:t,deviceIdList:o}})}function o(){return e({method:"GET",url:"http://"+n.deviceServerAddress+"/"})}function r(){return e({method:"PUT",url:"http://"+n.deviceServerAddress+"/?s",data:{}})}function i(t){return e({method:"PUT",url:"http://"+n.deviceServerAddress+"/",data:t})}function s(t){return e({method:"GET",url:"http://"+n.deviceServerAddress+"/?i="+t})}return{configureDevice:t,getDeviceConfiguration:o,scanNetworks:r,testNetwork:i,testSwitch:s}}]).factory("TerminalService",["$http","settings",function(e,n){function t(e){i=e}function o(){return i}function r(t){return e({method:"POST",url:"http://"+n.serverAddress+"/device/terminals",data:t})}var i=[];return{setTerminals:t,getTerminals:o,fetchTerminals:r}}]).factory("ConfigurationService",[function(){function e(){return t}function n(e){return t=e}var t={ssid:null,password:null};return{getCredentials:e,setCredentials:n}}]).factory("NetworkService",["settings",function(e){function n(n){r.scanForWiFi(function(t,o){if(t)n(t);else{var r=(o.networks,function(e){var n=[];for(var t in e){var o=!0,r=e[t];for(var i in n){var s=n[i];if(s.ssid===r.ssid){o=!1;break}}o&&n.push(r)}return n}(o.networks));n(null,r.filter(function(n){return 0===n.ssid.indexOf(e.deviceNetworkPrefix)}))}})}function t(n,t){r.connectToAP({ssid:n,password:e.deviceNetworkPassword},function(e,o){if(e)t(e);else{var i=r.getIfaceState();o.success&&i.ssid===n?t(null,n):t("Failed to connect to "+(n||"device"))}})}function o(e,n){r.connectToAP({ssid:e.ssid,password:e.password},function(t,o){if(t)n(t);else{var i=r.getIfaceState();o.success&&i.ssid===e.ssid?n(null,e.ssid):n("Failed to connect to "+(e.ssid||"network"))}})}var r=require("wifi-control");return r.init(),{find:n,connect:t,restore:o}}]).directive("timeSince",["$timeout",function(e){return{restrict:"A",link:function(n,t,o,r){function i(n){e.cancel(c),c=e(function(){t.html(s(new Date(o.timeSince)))},n)}function s(e){var n=Math.floor((new Date-e)/1e3),t=Math.floor(n/31536e3),o="";return t>=1?(i(7776e6-50),o=t+" year"+(t>1?"s":"")+" ago"):(t=Math.floor(n/2592e3),t>=1?(i(1296e6-50),o=t+" month"+(t>1?"s":"")+" ago"):(t=Math.floor(n/86400),t>=1?(i(86399950),o=t+" day"+(t>1?"s":"")+" ago"):(t=Math.floor(n/3600),t>=1?(i(3599950),o=t+" hour"+(t>1?"s":"")+" ago"):(t=Math.floor(n/60),t>=1?(i(59950),o=t+" minute"+(t>1?"s":"")+" ago"):(i(950),o=Math.floor(n)+" seconds ago"))))),o}var c;i(0)}}}])}(),function(){angular.module("app",["home","manage","network","device"]).controller("AppCtrl",["$scope","TerminalService","$state","$rootScope","$timeout",function(e,n,t,o,r){var i=function(e){var n=document.querySelectorAll(".mdl-layout__tab");angular.forEach(n,function(n,t){n=angular.element(n),n.removeClass("is-active"),n.hasClass(e+"-tab")&&n.addClass("is-active")})};e.goTo=function(e){t.go(e,{},{reload:!0})},o.$on("$stateChangeStart",function(n,t,o,i,s){r(function(){e.loading=!0})}),o.$on("$stateChangeSuccess",function(n,t,o,s,c){r(function(){i(s.name),e.currentState=t,componentHandler.upgradeAllRegistered(),e.loading=!1})}),o.$on("$stateChangeError",function(n,t,o,r,i,s){s.go&&(e.goTo(s.go),e.loading=!1)})}])}(),function(){angular.module("device",["common"]).config(["$stateProvider","$urlRouterProvider","resolve",function(e,n,t){n.otherwise("/"),e.state("device",{url:"/device",templateUrl:"device.html",controller:"DeviceCtrl",resolve:{terminals:t.terminals}})}]).controller("DeviceCtrl",["$scope","NetworkService","$timeout","$state","settings",function(e,n,t,o,r){var i=document.querySelector("#dialog");e.scanMessage="Scanning...",e.scanDevices=function(){e.timeoutInstance&&t.cancel(e.timeoutInstance),e.scanMessage="Scanning...",e.scanning=!0,n.find(function(n,o){n&&(e.scanMessage=n,console.error(n)),t(function(){e.scanning=!1,e.devices=o,e.devices.length>0?e.scanMessage=e.devices.length+" Device"+(o.length>1?"s":"")+" Found":e.scanMessage="No Devices Found"})}),e.timeoutInstance=t(function(){e.scanDevices()},r.deviceScanInterval)},e.scanDevices(),e.connectDevice=function(t){e.selectedDevice=t,e.message=null,n.connect(t,function(n,t){n?(e.message="Could not connect to device",console.error(n),i.showModal()):(e.message=null,o.go("network"))})},e.closeDialog=function(){i.close(),e.message=""}}])}(),function(){angular.module("manage",["common"]).config(["$stateProvider","$urlRouterProvider","resolve",function(e,n,t){n.otherwise("/"),e.state("manage",{url:"/manage",templateUrl:"manage.html",controller:"ManageCtrl",resolve:t})}]).controller("ManageCtrl",["$scope","TerminalService","NetworkService","ConfigurationService","DeviceService","$timeout","$state",function(e,n,t,o,r,i,s){e.terminalList=n.getTerminals(),e.homeCredentials=o.getCredentials(),e.deviceIdList=[],e.switchList=[],r.getDeviceConfiguration().then(function(n){e.switchList.length=n.data.switchCount,e.deviceIdList=n.data.deviceIdList},function(e){s.go("network")}),e.getTerminalProperty=function(n,t){var o=t?t.split("/")[2]:null,r=null;if(o)for(var i in e.terminalList){var s=e.terminalList[i];if(s.terminalId===o){r=s[n];break}}return r},e.setupDevice=function(e,n){n=n.map(function(e,n){return e?e:"//"}),r.configureDevice(e,n).then(function(n){console.log("Configuration Success"),t.restore(e,function(e,n){s.go("home")})},function(e){console.log("Configuration Failed")})},e.toggleSwitch=function(e){r.testSwitch(e).then(function(e){console.log("Switch is turned "+(1===e.data.state?"on":"off"))},function(e){console.log("Unable to access switch")})}}])}(),function(){angular.module("network",["common"]).config(["$stateProvider","$urlRouterProvider","resolve",function(e,n,t){n.otherwise("/"),e.state("network",{url:"/network",templateUrl:"network.html",controller:"NetworkCtrl",resolve:{terminals:t.terminals,device:t.device}})}]).controller("NetworkCtrl",["$scope","DeviceService","ConfigurationService","$timeout","$state","settings",function(e,n,t,o,r,i){e.scanMessage="Scanning...",e.credentials=t.getCredentials();var s=document.querySelector("#networkPasswordDialog");e.changeNetwork=function(){e.scanNetworks()},e.scanNetworks=function(){e.timeoutInstance&&o.cancel(e.timeoutInstance),e.scanMessage="Scanning...",e.scanning=!0,n.scanNetworks().then(function(n){e.scanning=!1,e.networks=n.data,e.networks.length>0?e.scanMessage=e.networks.length+" Network"+(e.networks.length>1?"s":"")+" Found":e.scanMessage="No Networks Found"},function(n){e.scanMessage="Failed to scan networks",console.error(n)}),e.timeoutInstance=o(function(){e.scanNetworks()},i.networkScanInterval)},e.$on("$destroy",function(){o.cancel(e.timeoutInstance)}),e.scanNetworks(),e.openNetworkPasswordModal=function(n){e.selectedNetwork=n,e.connectMessage=null,s.showModal()},e.testNetwork=function(o){var i={ssid:e.selectedNetwork,password:o};n.testNetwork(i).then(function(n){e.connectMessage=null,e.credentials=t.setCredentials(i),r.go("manage")},function(n){e.connectMessage="Unable to connect to network, verify password",console.error(n)})},e.closeNetworkPasswordDialog=function(){e.password="",e.connectMessage=null,s.close()}}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhvbWUuanMiLCJjb21tb24uanMiLCJpbmRleC5qcyIsImRldmljZS9kZXZpY2UuanMiLCJtYW5hZ2UvbWFuYWdlLmpzIiwibmV0d29yay9uZXR3b3JrLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCJzdGF0ZVByb3ZpZGVyIiwidXJsUm91dGVyUHJvdmlkZXIiLCJvdGhlcndpc2UiLCJzdGF0ZSIsInVybCIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsInNjb3BlIiwiaHR0cCIsInRlcm1pbmFsU2VydmljZSIsImRpYWxvZyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImZldGNoVGVybWluYWxzIiwiY3JlZGVudGlhbHMiLCJ1c2VyTmFtZSIsInBhc3N3b3JkIiwidGhlbiIsInJlc3BvbnNlIiwiZGF0YSIsInRlcm1pbmFscyIsImxlbmd0aCIsInNldFRlcm1pbmFscyIsImdvIiwibWVzc2FnZSIsInNob3dNb2RhbCIsImNsb3NlRGlhbG9nIiwiY2xvc2UiLCJjb25zdGFudCIsInNlcnZlckFkZHJlc3MiLCJkZXZpY2VTZXJ2ZXJBZGRyZXNzIiwiZGV2aWNlTmV0d29ya1ByZWZpeCIsImRldmljZU5ldHdvcmtQYXNzd29yZCIsInJlcXVlc3RUaW1lb3V0IiwibmV0d29ya1NjYW5JbnRlcnZhbCIsImRldmljZVNjYW5JbnRlcnZhbCIsInEiLCJkZWZlcnJlZCIsImRlZmVyIiwiZ2V0VGVybWluYWxzIiwicmVzb2x2ZSIsInJlamVjdCIsInByb21pc2UiLCJuZXR3b3JrIiwiY29uZmlndXJhdGlvblNlcnZpY2UiLCJnZXRDcmVkZW50aWFscyIsInNzaWQiLCJkZXZpY2UiLCJkZXZpY2VTZXJ2aWNlIiwic2V0dGluZ3MiLCJyYWNlIiwiZ2V0RGV2aWNlQ29uZmlndXJhdGlvbiIsIlByb21pc2UiLCJzZXRUaW1lb3V0IiwiZmFjdG9yeSIsImNvbmZpZ3VyZURldmljZSIsImhvbWVDcmVkZW50aWFscyIsImRldmljZUlkTGlzdCIsIm1ldGhvZCIsInNjYW5OZXR3b3JrcyIsInRlc3ROZXR3b3JrIiwidGVzdFN3aXRjaCIsImluZGV4IiwidGVybWluYWxzTGlzdCIsInNldENyZWRlbnRpYWxzIiwiZmluZCIsImNhbGxiYWNrIiwiV2lGaUNvbnRyb2wiLCJzY2FuRm9yV2lGaSIsImVycm9yIiwidW5pcXVlTmV0d29ya3MiLCJuZXR3b3JrcyIsIm5ldHdvcmtJbmRleCIsImlzVW5pcXVlIiwidW5pcXVlTmV0d29ya0luZGV4IiwidW5pcXVlTmV0d29yayIsInB1c2giLCJmaWx0ZXIiLCJpbmRleE9mIiwiY29ubmVjdCIsImNvbm5lY3RUb0FQIiwiaW50ZXJmYWNlU3RhdGUiLCJnZXRJZmFjZVN0YXRlIiwic3VjY2VzcyIsInJlc3RvcmUiLCJyZXF1aXJlIiwiaW5pdCIsImRpcmVjdGl2ZSIsInRpbWVvdXQiLCJyZXN0cmljdCIsImxpbmsiLCJlbGVtZW50IiwiYXR0cnMiLCJjdHJsIiwidXBkYXRlVGltZW91dCIsIm5ld1RpbWVvdXQiLCJjYW5jZWwiLCJ1cGRhdGVyIiwiaHRtbCIsInRpbWVTaW5jZSIsIkRhdGUiLCJkYXRlIiwic2Vjb25kcyIsIk1hdGgiLCJmbG9vciIsImludGVydmFsIiwidGltZVNpbmNlVGV4dCIsInJvb3RTY29wZSIsInNlbGVjdFRhYiIsInRhYk5hbWUiLCJlbGVtZW50TGlzdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwicmVtb3ZlQ2xhc3MiLCJoYXNDbGFzcyIsImFkZENsYXNzIiwiZ29UbyIsInJvdXRlTmFtZSIsInJlbG9hZCIsIiRvbiIsImV2ZW50IiwidG9TdGF0ZSIsInRvUGFyYW1zIiwiZnJvbVN0YXRlIiwiZnJvbVBhcmFtcyIsImxvYWRpbmciLCJuYW1lIiwiY3VycmVudFN0YXRlIiwiY29tcG9uZW50SGFuZGxlciIsInVwZ3JhZGVBbGxSZWdpc3RlcmVkIiwibmV0d29ya1NlcnZpY2UiLCJzY2FuTWVzc2FnZSIsInNjYW5EZXZpY2VzIiwidGltZW91dEluc3RhbmNlIiwic2Nhbm5pbmciLCJkZXZpY2VzIiwiY29uc29sZSIsImNvbm5lY3REZXZpY2UiLCJkZXZpY2VTU0lEIiwic2VsZWN0ZWREZXZpY2UiLCJ0ZXJtaW5hbExpc3QiLCJzd2l0Y2hMaXN0Iiwic3dpdGNoQ291bnQiLCJnZXRUZXJtaW5hbFByb3BlcnR5IiwicHJvcGVydHkiLCJkZXZpY2VJZCIsInRlcm1pbmFsSWQiLCJzcGxpdCIsInByb3BlcnR5VmFsdWUiLCJ0ZXJtaW5hbEluZGV4IiwidGVybWluYWwiLCJzZXR1cERldmljZSIsIm1hcCIsImRldmljZUlkSW5kZXgiLCJsb2ciLCJ0b2dnbGVTd2l0Y2giLCJuZXR3b3JrUGFzc3dvcmREaWFsb2ciLCJjaGFuZ2VOZXR3b3JrIiwib3Blbk5ldHdvcmtQYXNzd29yZE1vZGFsIiwibmV0d29ya1NTSUQiLCJzZWxlY3RlZE5ldHdvcmsiLCJjb25uZWN0TWVzc2FnZSIsImNsb3NlTmV0d29ya1Bhc3N3b3JkRGlhbG9nIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUNBQSxRQUFBQyxPQUFBLFFBQUEsV0FDQUMsUUFBQSxpQkFBQSxxQkFBQSxTQUFBQyxFQUFBQyxHQUNBQSxFQUFBQyxVQUFBLEtBQ0FGLEVBQ0FHLE1BQUEsUUFDQUMsSUFBQSxJQUNBQyxZQUFBLFlBQ0FDLFdBQUEsZ0JBR0FBLFdBQUEsWUFBQSxTQUFBLFFBQUEsa0JBQUEsU0FBQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBTixHQUNBLEdBQUFPLEdBQUFDLFNBQUFDLGNBQUEsVUFFQUwsR0FBQU0sZUFBQSxXQUNBLEdBQUFDLElBQ0FDLFNBQUFSLEVBQUFRLFNBQ0FDLFNBQUFULEVBQUFTLFNBRUFQLEdBQUFJLGVBQUFDLEdBQUFHLEtBQUEsU0FBQUMsR0FDQUEsRUFBQUMsS0FBQUMsVUFBQUMsUUFDQVosRUFBQWEsYUFBQUosRUFBQUMsS0FBQUMsV0FDQWpCLEVBQUFvQixHQUFBLFlBRUFoQixFQUFBaUIsUUFBQSx5QkFDQWQsRUFBQWUsY0FFQSxTQUFBUCxHQUNBWCxFQUFBaUIsUUFBQU4sRUFBQUMsS0FBQUQsRUFBQUMsS0FBQUssUUFBQSxxQkFDQWQsRUFBQWUsZUFJQWxCLEVBQUFtQixZQUFBLFdBQ0FoQixFQUFBaUIsUUFDQXBCLEVBQUFpQixRQUFBLFVDbkNBLFdBQ0EzQixRQUFBQyxPQUFBLFVBQUEsY0FDQThCLFNBQUEsWUFDQUMsY0FBQSxrQkFDQUMsb0JBQUEsY0FDQUMsb0JBQUEsZUFDQUMsc0JBQUEsaUJBQ0FDLGVBQUEsSUFDQUMsb0JBQUEsSUFDQUMsbUJBQUEsTUFFQVAsU0FBQSxXQUNBUixXQUFBLEtBQUEsa0JBQUEsU0FBQWdCLEVBQUEzQixHQUNBLEdBQUE0QixHQUFBRCxFQUFBRSxPQU1BLE9BTEE3QixHQUFBOEIsZUFBQWxCLE9BQUEsRUFDQWdCLEVBQUFHLFVBRUFILEVBQUFJLFFBQUFsQixHQUFBLFNBRUFjLEVBQUFLLFVBRUFDLFNBQUEsS0FBQSx1QkFBQSxTQUFBUCxFQUFBUSxHQUNBLEdBQUFQLEdBQUFELEVBQUFFLFFBQ0F4QixFQUFBOEIsRUFBQUMsZ0JBTUEsT0FMQS9CLEdBQUFnQyxNQUFBaEMsRUFBQWdDLEtBQUF6QixPQUFBLEVBQ0FnQixFQUFBRyxVQUVBSCxFQUFBSSxRQUFBbEIsR0FBQSxZQUVBYyxFQUFBSyxVQUVBSyxRQUFBLEtBQUEsZ0JBQUEsV0FBQSxTQUFBWCxFQUFBWSxFQUFBQyxHQUNBLEdBQUFaLEdBQUFELEVBQUFFLE9BUUEsT0FQQUYsR0FBQWMsTUFBQUYsRUFBQUcseUJBQUEsR0FBQUMsU0FBQSxTQUFBWixFQUFBQyxHQUNBWSxXQUFBWixFQUFBUSxFQUFBaEIsb0JBQ0FoQixLQUFBLFNBQUFDLEdBQ0FtQixFQUFBRyxXQUNBLFNBQUF0QixHQUNBbUIsRUFBQUksUUFBQWxCLEdBQUEsYUFFQWMsRUFBQUssWUFHQVksUUFBQSxpQkFBQSxRQUFBLFdBQUEsU0FBQTlDLEVBQUF5QyxHQUVBLFFBQUFNLEdBQUFDLEVBQUFDLEdBQ0EsTUFBQWpELElBQ0FrRCxPQUFBLE9BQ0F0RCxJQUFBLFVBQUE2QyxFQUFBbkIsb0JBQUEsSUFDQVgsTUFDQXFDLGdCQUFBQSxFQUNBQyxhQUFBQSxLQUtBLFFBQUFOLEtBQ0EsTUFBQTNDLElBQ0FrRCxPQUFBLE1BQ0F0RCxJQUFBLFVBQUE2QyxFQUFBbkIsb0JBQUEsTUFJQSxRQUFBNkIsS0FDQSxNQUFBbkQsSUFDQWtELE9BQUEsTUFDQXRELElBQUEsVUFBQTZDLEVBQUFuQixvQkFBQSxNQUNBWCxVQUlBLFFBQUF5QyxHQUFBOUMsR0FDQSxNQUFBTixJQUNBa0QsT0FBQSxNQUNBdEQsSUFBQSxVQUFBNkMsRUFBQW5CLG9CQUFBLElBQ0FYLEtBQUFMLElBSUEsUUFBQStDLEdBQUFDLEdBQ0EsTUFBQXRELElBQ0FrRCxPQUFBLE1BQ0F0RCxJQUFBLFVBQUE2QyxFQUFBbkIsb0JBQUEsT0FBQWdDLElBSUEsT0FDQVAsZ0JBQUFBLEVBQ0FKLHVCQUFBQSxFQUNBUSxhQUFBQSxFQUNBQyxZQUFBQSxFQUNBQyxXQUFBQSxNQUdBUCxRQUFBLG1CQUFBLFFBQUEsV0FBQSxTQUFBOUMsRUFBQXlDLEdBSUEsUUFBQTNCLEdBQUF5QyxHQUNBM0MsRUFBQTJDLEVBR0EsUUFBQXhCLEtBQ0EsTUFBQW5CLEdBR0EsUUFBQVAsR0FBQUMsR0FDQSxNQUFBTixJQUNBa0QsT0FBQSxPQUNBdEQsSUFBQSxVQUFBNkMsRUFBQXBCLGNBQUEsb0JBQ0FWLEtBQUFMLElBZEEsR0FBQU0sS0FrQkEsUUFDQUUsYUFBQUEsRUFDQWlCLGFBQUFBLEVBQ0ExQixlQUFBQSxNQUdBeUMsUUFBQSx3QkFBQSxXQU9BLFFBQUFULEtBQ0EsTUFBQVcsR0FHQSxRQUFBUSxHQUFBbEQsR0FFQSxNQURBMEMsR0FBQTFDLEVBVkEsR0FBQTBDLElBQ0FWLEtBQUEsS0FDQTlCLFNBQUEsS0FZQSxRQUNBNkIsZUFBQUEsRUFDQW1CLGVBQUFBLE1BR0FWLFFBQUEsa0JBQUEsV0FBQSxTQUFBTCxHQU1BLFFBQUFnQixHQUFBQyxHQUNBQyxFQUFBQyxZQUFBLFNBQUFDLEVBQUFuRCxHQUNBLEdBQUFtRCxFQUNBSCxFQUFBRyxPQUNBLENBQ0EsR0FDQUMsSUFEQXBELEVBQUFxRCxTQUNBLFNBQUFBLEdBQ0EsR0FBQUQsS0FDQSxLQUFBLEdBQUFFLEtBQUFELEdBQUEsQ0FDQSxHQUFBRSxJQUFBLEVBQ0E5QixFQUFBNEIsRUFBQUMsRUFDQSxLQUFBLEdBQUFFLEtBQUFKLEdBQUEsQ0FDQSxHQUFBSyxHQUFBTCxFQUFBSSxFQUNBLElBQUFDLEVBQUE3QixPQUFBSCxFQUFBRyxLQUFBLENBQ0EyQixHQUFBLENBQ0EsUUFHQUEsR0FDQUgsRUFBQU0sS0FBQWpDLEdBR0EsTUFBQTJCLElBQ0FwRCxFQUFBcUQsVUFDQUwsR0FBQSxLQUFBSSxFQUFBTyxPQUFBLFNBQUFsQyxHQUNBLE1BQUEsS0FBQUEsRUFBQUcsS0FBQWdDLFFBQUE3QixFQUFBbEIsMkJBTUEsUUFBQWdELEdBQUFqQyxFQUFBb0IsR0FDQUMsRUFBQWEsYUFDQWxDLEtBQUFBLEVBQ0E5QixTQUFBaUMsRUFBQWpCLHVCQUNBLFNBQUFxQyxFQUFBbkQsR0FDQSxHQUFBbUQsRUFDQUgsRUFBQUcsT0FDQSxDQUNBLEdBQUFZLEdBQUFkLEVBQUFlLGVBQ0FoRSxHQUFBaUUsU0FBQUYsRUFBQW5DLE9BQUFBLEVBQ0FvQixFQUFBLEtBQUFwQixHQUVBb0IsRUFBQSx5QkFBQXBCLEdBQUEsY0FNQSxRQUFBc0MsR0FBQXRFLEVBQUFvRCxHQUNBQyxFQUFBYSxhQUNBbEMsS0FBQWhDLEVBQUFnQyxLQUNBOUIsU0FBQUYsRUFBQUUsVUFDQSxTQUFBcUQsRUFBQW5ELEdBQ0EsR0FBQW1ELEVBQ0FILEVBQUFHLE9BQ0EsQ0FDQSxHQUFBWSxHQUFBZCxFQUFBZSxlQUNBaEUsR0FBQWlFLFNBQUFGLEVBQUFuQyxPQUFBaEMsRUFBQWdDLEtBQ0FvQixFQUFBLEtBQUFwRCxFQUFBZ0MsTUFFQW9CLEVBQUEseUJBQUFwRCxFQUFBZ0MsTUFBQSxlQWpFQSxHQUFBcUIsR0FBQWtCLFFBQUEsZUF1RUEsT0FyRUFsQixHQUFBbUIsUUFzRUFyQixLQUFBQSxFQUNBYyxRQUFBQSxFQUNBSyxRQUFBQSxNQUdBRyxVQUFBLGFBQUEsV0FBQSxTQUFBQyxHQUNBLE9BQ0FDLFNBQUEsSUFDQUMsS0FBQSxTQUFBbkYsRUFBQW9GLEVBQUFDLEVBQUFDLEdBTUEsUUFBQUMsR0FBQUMsR0FDQVAsRUFBQVEsT0FBQUMsR0FDQUEsRUFBQVQsRUFBQSxXQUNBRyxFQUFBTyxLQUFBQyxFQUFBLEdBQUFDLE1BQUFSLEVBQUFPLGNBQ0FKLEdBR0EsUUFBQUksR0FBQUUsR0FDQSxHQUFBQyxHQUFBQyxLQUFBQyxPQUFBLEdBQUFKLE1BQUFDLEdBQUEsS0FDQUksRUFBQUYsS0FBQUMsTUFBQUYsRUFBQSxTQUNBSSxFQUFBLEVBZ0NBLE9BL0JBRCxJQUFBLEdBQ0FYLEVBQUEsT0FBQSxJQUNBWSxFQUFBRCxFQUFBLFNBQUFBLEVBQUEsRUFBQSxJQUFBLElBQUEsU0FFQUEsRUFBQUYsS0FBQUMsTUFBQUYsRUFBQSxRQUNBRyxHQUFBLEdBQ0FYLEVBQUEsT0FBQSxJQUNBWSxFQUFBRCxFQUFBLFVBQUFBLEVBQUEsRUFBQSxJQUFBLElBQUEsU0FFQUEsRUFBQUYsS0FBQUMsTUFBQUYsRUFBQSxPQUNBRyxHQUFBLEdBQ0FYLEVBQUEsVUFDQVksRUFBQUQsRUFBQSxRQUFBQSxFQUFBLEVBQUEsSUFBQSxJQUFBLFNBRUFBLEVBQUFGLEtBQUFDLE1BQUFGLEVBQUEsTUFDQUcsR0FBQSxHQUNBWCxFQUFBLFNBQ0FZLEVBQUFELEVBQUEsU0FBQUEsRUFBQSxFQUFBLElBQUEsSUFBQSxTQUVBQSxFQUFBRixLQUFBQyxNQUFBRixFQUFBLElBQ0FHLEdBQUEsR0FDQVgsRUFBQSxPQUNBWSxFQUFBRCxFQUFBLFdBQUFBLEVBQUEsRUFBQSxJQUFBLElBQUEsU0FFQVgsRUFBQSxLQUNBWSxFQUFBSCxLQUFBQyxNQUFBRixHQUFBLG9CQU1BSSxFQTlDQSxHQUFBVCxFQUVBSCxHQUFBLFdDbk9BLFdBQ0FqRyxRQUFBQyxPQUFBLE9BQUEsT0FBQSxTQUFBLFVBQUEsV0FDQVEsV0FBQSxXQUFBLFNBQUEsa0JBQUEsU0FBQSxhQUFBLFdBQUEsU0FBQUMsRUFBQUUsRUFBQU4sRUFBQXdHLEVBQUFuQixHQUVBLEdBQUFvQixHQUFBLFNBQUFDLEdBQ0EsR0FBQUMsR0FBQW5HLFNBQUFvRyxpQkFBQSxtQkFDQWxILFNBQUFtSCxRQUFBRixFQUFBLFNBQUFuQixFQUFBN0IsR0FDQTZCLEVBQUE5RixRQUFBOEYsUUFBQUEsR0FDQUEsRUFBQXNCLFlBQUEsYUFDQXRCLEVBQUF1QixTQUFBTCxFQUFBLFNBQ0FsQixFQUFBd0IsU0FBQSxlQUtBNUcsR0FBQTZHLEtBQUEsU0FBQUMsR0FDQWxILEVBQUFvQixHQUFBOEYsTUFBQUMsUUFBQSxLQUdBWCxFQUFBWSxJQUFBLG9CQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0FwQyxFQUFBLFdBQ0FqRixFQUFBc0gsU0FBQSxNQUlBbEIsRUFBQVksSUFBQSxzQkFBQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBcEMsRUFBQSxXQUNBb0IsRUFBQWUsRUFBQUcsTUFDQXZILEVBQUF3SCxhQUFBTixFQUNBTyxpQkFBQUMsdUJBQ0ExSCxFQUFBc0gsU0FBQSxNQUlBbEIsRUFBQVksSUFBQSxvQkFBQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBdkQsR0FDQUEsRUFBQTlDLEtBQ0FoQixFQUFBNkcsS0FBQS9DLEVBQUE5QyxJQUNBaEIsRUFBQXNILFNBQUEsV0NyQ0EsV0FDQWhJLFFBQUFDLE9BQUEsVUFBQSxXQUNBQyxRQUFBLGlCQUFBLHFCQUFBLFVBQUEsU0FBQUMsRUFBQUMsRUFBQXVDLEdBQ0F2QyxFQUFBQyxVQUFBLEtBQ0FGLEVBQ0FHLE1BQUEsVUFDQUMsSUFBQSxVQUNBQyxZQUFBLGNBQ0FDLFdBQUEsYUFDQWtDLFNBQ0FwQixVQUFBb0IsRUFBQXBCLGdCQUlBZCxXQUFBLGNBQUEsU0FBQSxpQkFBQSxXQUFBLFNBQUEsV0FBQSxTQUFBQyxFQUFBMkgsRUFBQTFDLEVBQUFyRixFQUFBOEMsR0FDQSxHQUFBdkMsR0FBQUMsU0FBQUMsY0FBQSxVQUVBTCxHQUFBNEgsWUFBQSxjQUVBNUgsRUFBQTZILFlBQUEsV0FDQTdILEVBQUE4SCxpQkFDQTdDLEVBQUFRLE9BQUF6RixFQUFBOEgsaUJBRUE5SCxFQUFBNEgsWUFBQSxjQUNBNUgsRUFBQStILFVBQUEsRUFDQUosRUFBQWpFLEtBQUEsU0FBQUksRUFBQWtFLEdBQ0FsRSxJQUNBOUQsRUFBQTRILFlBQUE5RCxFQUNBbUUsUUFBQW5FLE1BQUFBLElBRUFtQixFQUFBLFdBQ0FqRixFQUFBK0gsVUFBQSxFQUNBL0gsRUFBQWdJLFFBQUFBLEVBQ0FoSSxFQUFBZ0ksUUFBQWxILE9BQUEsRUFDQWQsRUFBQTRILFlBQUE1SCxFQUFBZ0ksUUFBQWxILE9BQUEsV0FBQWtILEVBQUFsSCxPQUFBLEVBQUEsSUFBQSxJQUFBLFNBR0FkLEVBQUE0SCxZQUFBLHVCQUlBNUgsRUFBQThILGdCQUFBN0MsRUFBQSxXQUNBakYsRUFBQTZILGVBQ0FuRixFQUFBZCxxQkFHQTVCLEVBQUE2SCxjQUVBN0gsRUFBQWtJLGNBQUEsU0FBQUMsR0FDQW5JLEVBQUFvSSxlQUFBRCxFQUNBbkksRUFBQWlCLFFBQUEsS0FDQTBHLEVBQUFuRCxRQUFBMkQsRUFBQSxTQUFBckUsRUFBQXZELEdBQ0F1RCxHQUNBOUQsRUFBQWlCLFFBQUEsOEJBQ0FnSCxRQUFBbkUsTUFBQUEsR0FDQTNELEVBQUFlLGNBRUFsQixFQUFBaUIsUUFBQSxLQUNBckIsRUFBQW9CLEdBQUEsZUFLQWhCLEVBQUFtQixZQUFBLFdBQ0FoQixFQUFBaUIsUUFDQXBCLEVBQUFpQixRQUFBLFVDakVBLFdBQ0EzQixRQUFBQyxPQUFBLFVBQUEsV0FDQUMsUUFBQSxpQkFBQSxxQkFBQSxVQUFBLFNBQUFDLEVBQUFDLEVBQUF1QyxHQUNBdkMsRUFBQUMsVUFBQSxLQUNBRixFQUNBRyxNQUFBLFVBQ0FDLElBQUEsVUFDQUMsWUFBQSxjQUNBQyxXQUFBLGFBQ0FrQyxRQUFBQSxPQUdBbEMsV0FBQSxjQUFBLFNBQUEsa0JBQUEsaUJBQUEsdUJBQUEsZ0JBQUEsV0FBQSxTQUFBLFNBQUFDLEVBQUFFLEVBQUF5SCxFQUFBdEYsRUFBQUksRUFBQXdDLEVBQUFyRixHQUVBSSxFQUFBcUksYUFBQW5JLEVBQUE4QixlQUVBaEMsRUFBQWlELGdCQUFBWixFQUFBQyxpQkFFQXRDLEVBQUFrRCxnQkFFQWxELEVBQUFzSSxjQUVBN0YsRUFBQUcseUJBQUFsQyxLQUFBLFNBQUFDLEdBQ0FYLEVBQUFzSSxXQUFBeEgsT0FBQUgsRUFBQUMsS0FBQTJILFlBQ0F2SSxFQUFBa0QsYUFBQXZDLEVBQUFDLEtBQUFzQyxjQUNBLFNBQUF2QyxHQUNBZixFQUFBb0IsR0FBQSxhQUdBaEIsRUFBQXdJLG9CQUFBLFNBQUFDLEVBQUFDLEdBQ0EsR0FBQUMsR0FBQSxFQUFBRCxFQUFBRSxNQUFBLEtBQUEsR0FBQSxLQUNBQyxFQUFBLElBQ0EsSUFBQUYsRUFDQSxJQUFBLEdBQUFHLEtBQUE5SSxHQUFBcUksYUFBQSxDQUNBLEdBQUFVLEdBQUEvSSxFQUFBcUksYUFBQVMsRUFDQSxJQUFBQyxFQUFBSixhQUFBQSxFQUFBLENBQ0FFLEVBQUFFLEVBQUFOLEVBQ0EsUUFJQSxNQUFBSSxJQUdBN0ksRUFBQWdKLFlBQUEsU0FBQS9GLEVBQUFDLEdBQ0FBLEVBQUFBLEVBQUErRixJQUFBLFNBQUFQLEVBQUFRLEdBQ0EsTUFBQVIsR0FBQUEsRUFBQSxPQUVBakcsRUFBQU8sZ0JBQUFDLEVBQUFDLEdBQUF4QyxLQUFBLFNBQUFDLEdBQ0FzSCxRQUFBa0IsSUFBQSx5QkFDQXhCLEVBQUE5QyxRQUFBNUIsRUFBQSxTQUFBYSxFQUFBdkQsR0FDQVgsRUFBQW9CLEdBQUEsV0FFQSxTQUFBTCxHQUNBc0gsUUFBQWtCLElBQUEsMkJBSUFuSixFQUFBb0osYUFBQSxTQUFBN0YsR0FDQWQsRUFBQWEsV0FBQUMsR0FBQTdDLEtBQUEsU0FBQUMsR0FDQXNILFFBQUFrQixJQUFBLHFCQUFBLElBQUF4SSxFQUFBQyxLQUFBaEIsTUFBQSxLQUFBLFNBQ0EsU0FBQWUsR0FDQXNILFFBQUFrQixJQUFBLG9DQzlEQSxXQUNBN0osUUFBQUMsT0FBQSxXQUFBLFdBQ0FDLFFBQUEsaUJBQUEscUJBQUEsVUFBQSxTQUFBQyxFQUFBQyxFQUFBdUMsR0FDQXZDLEVBQUFDLFVBQUEsS0FDQUYsRUFDQUcsTUFBQSxXQUNBQyxJQUFBLFdBQ0FDLFlBQUEsZUFDQUMsV0FBQSxjQUNBa0MsU0FDQXBCLFVBQUFvQixFQUFBcEIsVUFDQTJCLE9BQUFQLEVBQUFPLGFBSUF6QyxXQUFBLGVBQUEsU0FBQSxnQkFBQSx1QkFBQSxXQUFBLFNBQUEsV0FBQSxTQUFBQyxFQUFBeUMsRUFBQUosRUFBQTRDLEVBQUFyRixFQUFBOEMsR0FFQTFDLEVBQUE0SCxZQUFBLGNBRUE1SCxFQUFBTyxZQUFBOEIsRUFBQUMsZ0JBRUEsSUFBQStHLEdBQUFqSixTQUFBQyxjQUFBLHlCQUVBTCxHQUFBc0osY0FBQSxXQUNBdEosRUFBQW9ELGdCQUdBcEQsRUFBQW9ELGFBQUEsV0FDQXBELEVBQUE4SCxpQkFDQTdDLEVBQUFRLE9BQUF6RixFQUFBOEgsaUJBRUE5SCxFQUFBNEgsWUFBQSxjQUNBNUgsRUFBQStILFVBQUEsRUFDQXRGLEVBQUFXLGVBQUExQyxLQUFBLFNBQUFDLEdBQ0FYLEVBQUErSCxVQUFBLEVBQ0EvSCxFQUFBZ0UsU0FBQXJELEVBQUFDLEtBQ0FaLEVBQUFnRSxTQUFBbEQsT0FBQSxFQUNBZCxFQUFBNEgsWUFBQTVILEVBQUFnRSxTQUFBbEQsT0FBQSxZQUFBZCxFQUFBZ0UsU0FBQWxELE9BQUEsRUFBQSxJQUFBLElBQUEsU0FFQWQsRUFBQTRILFlBQUEscUJBRUEsU0FBQTFGLEdBQ0FsQyxFQUFBNEgsWUFBQSwwQkFDQUssUUFBQW5FLE1BQUE1QixLQUVBbEMsRUFBQThILGdCQUFBN0MsRUFBQSxXQUNBakYsRUFBQW9ELGdCQUNBVixFQUFBZixzQkFHQTNCLEVBQUFnSCxJQUFBLFdBQUEsV0FDQS9CLEVBQUFRLE9BQUF6RixFQUFBOEgsbUJBR0E5SCxFQUFBb0QsZUFFQXBELEVBQUF1Six5QkFBQSxTQUFBQyxHQUNBeEosRUFBQXlKLGdCQUFBRCxFQUNBeEosRUFBQTBKLGVBQUEsS0FDQUwsRUFBQW5JLGFBR0FsQixFQUFBcUQsWUFBQSxTQUFBNUMsR0FDQSxHQUFBRixJQUFBZ0MsS0FBQXZDLEVBQUF5SixnQkFBQWhKLFNBQUFBLEVBQ0FnQyxHQUFBWSxZQUFBOUMsR0FBQUcsS0FBQSxTQUFBQyxHQUNBWCxFQUFBMEosZUFBQSxLQUNBMUosRUFBQU8sWUFBQThCLEVBQUFvQixlQUFBbEQsR0FDQVgsRUFBQW9CLEdBQUEsV0FDQSxTQUFBa0IsR0FDQWxDLEVBQUEwSixlQUFBLGdEQUNBekIsUUFBQW5FLE1BQUE1QixNQUlBbEMsRUFBQTJKLDJCQUFBLFdBQ0EzSixFQUFBUyxTQUFBLEdBQ0FULEVBQUEwSixlQUFBLEtBQ0FMLEVBQUFqSSIsImZpbGUiOiJzY3JpcHRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcbiAgICBhbmd1bGFyLm1vZHVsZShcImhvbWVcIiwgWyBcImNvbW1vblwiIF0pXG4gICAgICAgIC5jb25maWcoW1wiJHN0YXRlUHJvdmlkZXJcIiwgXCIkdXJsUm91dGVyUHJvdmlkZXJcIiwgZnVuY3Rpb24gKHN0YXRlUHJvdmlkZXIsIHVybFJvdXRlclByb3ZpZGVyKSB7XG4gICAgICAgICAgICB1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoXCIvXCIpO1xuICAgICAgICAgICAgc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcImhvbWVcIiwge1xuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL1wiLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJob21lLmh0bWxcIixcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJIb21lQ3RybFwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1dKVxuICAgICAgICAuY29udHJvbGxlcihcIkhvbWVDdHJsXCIsIFsgXCIkc2NvcGVcIiwgXCIkaHR0cFwiLCBcIlRlcm1pbmFsU2VydmljZVwiLCBcIiRzdGF0ZVwiLCBmdW5jdGlvbiAoc2NvcGUsIGh0dHAsIHRlcm1pbmFsU2VydmljZSwgc3RhdGUpIHtcbiAgICAgICAgICAgIHZhciBkaWFsb2cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2RpYWxvZ1wiKTtcblxuICAgICAgICAgICAgc2NvcGUuZmV0Y2hUZXJtaW5hbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNyZWRlbnRpYWxzID0ge1xuICAgICAgICAgICAgICAgICAgICBcInVzZXJOYW1lXCI6IHNjb3BlLnVzZXJOYW1lLFxuICAgICAgICAgICAgICAgICAgICBcInBhc3N3b3JkXCI6IHNjb3BlLnBhc3N3b3JkXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0ZXJtaW5hbFNlcnZpY2UuZmV0Y2hUZXJtaW5hbHMoY3JlZGVudGlhbHMpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKHJlc3BvbnNlLmRhdGEudGVybWluYWxzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVybWluYWxTZXJ2aWNlLnNldFRlcm1pbmFscyhyZXNwb25zZS5kYXRhLnRlcm1pbmFscyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5nbyhcImRldmljZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLm1lc3NhZ2UgPSBcIk5vIFRlcm1pbmFscyBBdmFpbGFibGVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZy5zaG93TW9kYWwoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBzY29wZS5tZXNzYWdlID0gcmVzcG9uc2UuZGF0YSA/IHJlc3BvbnNlLmRhdGEubWVzc2FnZSA6IFwiU2VydmVyIFVuYXZhaWxhYmxlXCI7XG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZy5zaG93TW9kYWwoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHNjb3BlLmNsb3NlRGlhbG9nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGRpYWxvZy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHNjb3BlLm1lc3NhZ2UgPSBcIlwiO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgYW5ndWxhci5tb2R1bGUoXCJjb21tb25cIiwgWyBcInVpLnJvdXRlclwiIF0pXG4gICAgICAgIC5jb25zdGFudChcInNldHRpbmdzXCIsIHtcbiAgICAgICAgICAgIFwic2VydmVyQWRkcmVzc1wiIDogXCJyYWlkbXMuY29tOjgwODBcIixcbiAgICAgICAgICAgIFwiZGV2aWNlU2VydmVyQWRkcmVzc1wiIDogXCIxOTIuMTY4LjQuMVwiLFxuICAgICAgICAgICAgXCJkZXZpY2VOZXR3b3JrUHJlZml4XCIgOiBcIkhvbWVDb25uZWN0LVwiLFxuICAgICAgICAgICAgXCJkZXZpY2VOZXR3b3JrUGFzc3dvcmRcIiA6IFwic2V0dXBuZXdkZXZpY2VcIixcbiAgICAgICAgICAgIFwicmVxdWVzdFRpbWVvdXRcIiA6IDMwMDAsXG4gICAgICAgICAgICBcIm5ldHdvcmtTY2FuSW50ZXJ2YWxcIiA6IDYwMDAwLFxuICAgICAgICAgICAgXCJkZXZpY2VTY2FuSW50ZXJ2YWxcIiA6IDMwMDBcbiAgICAgICAgfSlcbiAgICAgICAgLmNvbnN0YW50KFwicmVzb2x2ZVwiLCB7XG4gICAgICAgICAgICBcInRlcm1pbmFsc1wiIDogWyBcIiRxXCIsIFwiVGVybWluYWxTZXJ2aWNlXCIsIGZ1bmN0aW9uIChxLCB0ZXJtaW5hbFNlcnZpY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSBxLmRlZmVyKCk7XG4gICAgICAgICAgICAgICAgaWYodGVybWluYWxTZXJ2aWNlLmdldFRlcm1pbmFscygpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCh7IGdvIDogXCJob21lXCIgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBcIm5ldHdvcmtcIiA6IFsgXCIkcVwiLCBcIkNvbmZpZ3VyYXRpb25TZXJ2aWNlXCIsIGZ1bmN0aW9uIChxLCBjb25maWd1cmF0aW9uU2VydmljZSkge1xuICAgICAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9IHEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICB2YXIgY3JlZGVudGlhbHMgPSBjb25maWd1cmF0aW9uU2VydmljZS5nZXRDcmVkZW50aWFscygpO1xuICAgICAgICAgICAgICAgIGlmKGNyZWRlbnRpYWxzLnNzaWQgJiYgY3JlZGVudGlhbHMuc3NpZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoeyBnbyA6IFwibmV0d29ya1wiIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgXCJkZXZpY2VcIiA6IFsgXCIkcVwiLCBcIkRldmljZVNlcnZpY2VcIiwgXCJzZXR0aW5nc1wiLCBmdW5jdGlvbiAocSwgZGV2aWNlU2VydmljZSwgc2V0dGluZ3MpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSBxLmRlZmVyKCk7XG4gICAgICAgICAgICAgICAgcS5yYWNlKCBbIGRldmljZVNlcnZpY2UuZ2V0RGV2aWNlQ29uZmlndXJhdGlvbigpLCAobmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHJlamVjdCwgc2V0dGluZ3MucmVxdWVzdFRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIH0pKSBdKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCh7IGdvIDogXCJkZXZpY2VcIiB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgICAgIH1dXG4gICAgICAgIH0pXG4gICAgICAgIC5mYWN0b3J5KFwiRGV2aWNlU2VydmljZVwiLCBbIFwiJGh0dHBcIiwgXCJzZXR0aW5nc1wiLCBmdW5jdGlvbiAoaHR0cCwgc2V0dGluZ3MpIHtcblxuICAgICAgICAgICAgZnVuY3Rpb24gY29uZmlndXJlRGV2aWNlKGhvbWVDcmVkZW50aWFscywgZGV2aWNlSWRMaXN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGh0dHAoe1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiaHR0cDovL1wiICsgc2V0dGluZ3MuZGV2aWNlU2VydmVyQWRkcmVzcyArIFwiL1wiLFxuICAgICAgICAgICAgICAgICAgICBkYXRhIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJob21lQ3JlZGVudGlhbHNcIiA6IGhvbWVDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGV2aWNlSWRMaXN0XCIgOiBkZXZpY2VJZExpc3RcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXREZXZpY2VDb25maWd1cmF0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBodHRwKHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiaHR0cDovL1wiICsgc2V0dGluZ3MuZGV2aWNlU2VydmVyQWRkcmVzcyArIFwiL1wiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNjYW5OZXR3b3JrcygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaHR0cCh7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcImh0dHA6Ly9cIiArIHNldHRpbmdzLmRldmljZVNlcnZlckFkZHJlc3MgKyBcIi8/c1wiLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7fVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiB0ZXN0TmV0d29yayhjcmVkZW50aWFscykge1xuICAgICAgICAgICAgICAgIHJldHVybiBodHRwKHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiaHR0cDovL1wiICsgc2V0dGluZ3MuZGV2aWNlU2VydmVyQWRkcmVzcyArIFwiL1wiLFxuICAgICAgICAgICAgICAgICAgICBkYXRhIDogY3JlZGVudGlhbHNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gdGVzdFN3aXRjaChpbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBodHRwKHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiaHR0cDovL1wiICsgc2V0dGluZ3MuZGV2aWNlU2VydmVyQWRkcmVzcyArIFwiLz9pPVwiICsgaW5kZXhcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjb25maWd1cmVEZXZpY2U6IGNvbmZpZ3VyZURldmljZSxcbiAgICAgICAgICAgICAgICBnZXREZXZpY2VDb25maWd1cmF0aW9uOiBnZXREZXZpY2VDb25maWd1cmF0aW9uLFxuICAgICAgICAgICAgICAgIHNjYW5OZXR3b3Jrczogc2Nhbk5ldHdvcmtzLFxuICAgICAgICAgICAgICAgIHRlc3ROZXR3b3JrOiB0ZXN0TmV0d29yayxcbiAgICAgICAgICAgICAgICB0ZXN0U3dpdGNoOiB0ZXN0U3dpdGNoXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XSlcbiAgICAgICAgLmZhY3RvcnkoXCJUZXJtaW5hbFNlcnZpY2VcIiwgWyBcIiRodHRwXCIsIFwic2V0dGluZ3NcIiwgZnVuY3Rpb24gKGh0dHAsIHNldHRpbmdzKSB7XG5cbiAgICAgICAgICAgIHZhciB0ZXJtaW5hbHMgPSBbXTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0VGVybWluYWxzKHRlcm1pbmFsc0xpc3QpIHtcbiAgICAgICAgICAgICAgICB0ZXJtaW5hbHMgPSB0ZXJtaW5hbHNMaXN0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRUZXJtaW5hbHMoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRlcm1pbmFscztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZmV0Y2hUZXJtaW5hbHMoY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaHR0cCh7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCJodHRwOi8vXCIgKyBzZXR0aW5ncy5zZXJ2ZXJBZGRyZXNzICsgXCIvZGV2aWNlL3Rlcm1pbmFsc1wiLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBjcmVkZW50aWFsc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNldFRlcm1pbmFsczogc2V0VGVybWluYWxzLFxuICAgICAgICAgICAgICAgIGdldFRlcm1pbmFsczogZ2V0VGVybWluYWxzLFxuICAgICAgICAgICAgICAgIGZldGNoVGVybWluYWxzOiBmZXRjaFRlcm1pbmFsc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfV0pXG4gICAgICAgIC5mYWN0b3J5KFwiQ29uZmlndXJhdGlvblNlcnZpY2VcIiwgWyBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIHZhciBob21lQ3JlZGVudGlhbHMgPSB7XG4gICAgICAgICAgICAgICAgXCJzc2lkXCIgOiBudWxsLFxuICAgICAgICAgICAgICAgIFwicGFzc3dvcmRcIiA6IG51bGxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldENyZWRlbnRpYWxzKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBob21lQ3JlZGVudGlhbHM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldENyZWRlbnRpYWxzKGNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICAgICAgaG9tZUNyZWRlbnRpYWxzID0gY3JlZGVudGlhbHM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvbWVDcmVkZW50aWFscztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBnZXRDcmVkZW50aWFsczogZ2V0Q3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgc2V0Q3JlZGVudGlhbHM6IHNldENyZWRlbnRpYWxzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XSlcbiAgICAgICAgLmZhY3RvcnkoXCJOZXR3b3JrU2VydmljZVwiLCBbIFwic2V0dGluZ3NcIiwgZnVuY3Rpb24gKHNldHRpbmdzKSB7XG5cbiAgICAgICAgICAgIHZhciBXaUZpQ29udHJvbCA9IHJlcXVpcmUoXCJ3aWZpLWNvbnRyb2xcIik7XG5cbiAgICAgICAgICAgIFdpRmlDb250cm9sLmluaXQoKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gZmluZChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIFdpRmlDb250cm9sLnNjYW5Gb3JXaUZpKGZ1bmN0aW9uIChlcnJvciwgcmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbGxOZXR3b3JrcyA9IHJlc3BvbnNlLm5ldHdvcmtzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVuaXF1ZU5ldHdvcmtzID0gKGZ1bmN0aW9uIChuZXR3b3Jrcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1bmlxdWVOZXR3b3JrcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgbmV0d29ya0luZGV4IGluIG5ldHdvcmtzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1VuaXF1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXR3b3JrID0gbmV0d29ya3NbbmV0d29ya0luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciB1bmlxdWVOZXR3b3JrSW5kZXggaW4gdW5pcXVlTmV0d29ya3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1bmlxdWVOZXR3b3JrID0gdW5pcXVlTmV0d29ya3NbdW5pcXVlTmV0d29ya0luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHVuaXF1ZU5ldHdvcmsuc3NpZCA9PT0gbmV0d29yay5zc2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNVbmlxdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihpc1VuaXF1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pcXVlTmV0d29ya3MucHVzaChuZXR3b3JrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5pcXVlTmV0d29ya3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KHJlc3BvbnNlLm5ldHdvcmtzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCB1bmlxdWVOZXR3b3Jrcy5maWx0ZXIoZnVuY3Rpb24gKG5ldHdvcmspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKG5ldHdvcmsuc3NpZC5pbmRleE9mKHNldHRpbmdzLmRldmljZU5ldHdvcmtQcmVmaXgpID09PSAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjb25uZWN0KHNzaWQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgV2lGaUNvbnRyb2wuY29ubmVjdFRvQVAoe1xuICAgICAgICAgICAgICAgICAgICBcInNzaWRcIiA6IHNzaWQsXG4gICAgICAgICAgICAgICAgICAgIFwicGFzc3dvcmRcIiA6IHNldHRpbmdzLmRldmljZU5ldHdvcmtQYXNzd29yZFxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvciwgcmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnRlcmZhY2VTdGF0ZSA9IFdpRmlDb250cm9sLmdldElmYWNlU3RhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlc3BvbnNlLnN1Y2Nlc3MgJiYgKGludGVyZmFjZVN0YXRlLnNzaWQgPT09IHNzaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgc3NpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKFwiRmFpbGVkIHRvIGNvbm5lY3QgdG8gXCIgKyAoc3NpZCB8fCBcImRldmljZVwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gcmVzdG9yZShjcmVkZW50aWFscywgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBXaUZpQ29udHJvbC5jb25uZWN0VG9BUCh7XG4gICAgICAgICAgICAgICAgICAgIFwic3NpZFwiIDogY3JlZGVudGlhbHMuc3NpZCxcbiAgICAgICAgICAgICAgICAgICAgXCJwYXNzd29yZFwiIDogY3JlZGVudGlhbHMucGFzc3dvcmRcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IsIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW50ZXJmYWNlU3RhdGUgPSBXaUZpQ29udHJvbC5nZXRJZmFjZVN0YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihyZXNwb25zZS5zdWNjZXNzICYmIChpbnRlcmZhY2VTdGF0ZS5zc2lkID09PSBjcmVkZW50aWFscy5zc2lkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGNyZWRlbnRpYWxzLnNzaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhcIkZhaWxlZCB0byBjb25uZWN0IHRvIFwiICsgKGNyZWRlbnRpYWxzLnNzaWQgfHwgXCJuZXR3b3JrXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIFwiZmluZFwiIDogZmluZCxcbiAgICAgICAgICAgICAgICBcImNvbm5lY3RcIiA6IGNvbm5lY3QsXG4gICAgICAgICAgICAgICAgXCJyZXN0b3JlXCIgOiByZXN0b3JlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XSlcbiAgICAgICAgLmRpcmVjdGl2ZShcInRpbWVTaW5jZVwiLCBbIFwiJHRpbWVvdXRcIiwgZnVuY3Rpb24gKHRpbWVvdXQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgXCJyZXN0cmljdFwiIDogXCJBXCIsXG4gICAgICAgICAgICAgICAgXCJsaW5rXCIgOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJsKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGltZW91dCgwKTtcblxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVUaW1lb3V0KG5ld1RpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQuY2FuY2VsKHVwZGF0ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlciA9IHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuaHRtbCh0aW1lU2luY2UobmV3IERhdGUoYXR0cnMudGltZVNpbmNlKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgbmV3VGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB0aW1lU2luY2UoZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlY29uZHMgPSBNYXRoLmZsb29yKChuZXcgRGF0ZSgpIC0gZGF0ZSkgLyAxMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnRlcnZhbCA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDMxNTM2MDAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lU2luY2VUZXh0ID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnRlcnZhbCA+PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGltZW91dCgoMTAwMCAqIDYwICogNjAgKiAyNCAqIDkwKSAtIDUwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lU2luY2VUZXh0ID0gaW50ZXJ2YWwgKyBcIiB5ZWFyXCIgKyAoKGludGVydmFsID4gMSkgPyBcInNcIiA6IFwiXCIpICsgXCIgYWdvXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVydmFsID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gMjU5MjAwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludGVydmFsID49IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGltZW91dCgoMTAwMCAqIDYwICogNjAgKiAyNCAqIDE1KSAtIDUwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZVNpbmNlVGV4dCA9IGludGVydmFsICsgXCIgbW9udGhcIiArICgoaW50ZXJ2YWwgPiAxKSA/IFwic1wiIDogXCJcIikgKyBcIiBhZ29cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbCA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDg2NDAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludGVydmFsID49IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVRpbWVvdXQoKDEwMDAgKiA2MCAqIDYwICogMjQpIC0gNTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZVNpbmNlVGV4dCA9IGludGVydmFsICsgXCIgZGF5XCIgKyAoKGludGVydmFsID4gMSkgPyBcInNcIiA6IFwiXCIpICsgXCIgYWdvXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbCA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDM2MDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludGVydmFsID49IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVUaW1lb3V0KCgxMDAwICogNjAgKiA2MCkgLSA1MCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZVNpbmNlVGV4dCA9IGludGVydmFsICsgXCIgaG91clwiICsgKChpbnRlcnZhbCA+IDEpID8gXCJzXCIgOiBcIlwiKSArIFwiIGFnb1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbCA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZXJ2YWwgPj0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVUaW1lb3V0KCgxMDAwICogNjApIC0gNTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lU2luY2VUZXh0ID0gaW50ZXJ2YWwgKyBcIiBtaW51dGVcIiArICgoaW50ZXJ2YWwgPiAxKSA/IFwic1wiIDogXCJcIikgKyBcIiBhZ29cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVUaW1lb3V0KDEwMDAgLSA1MCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVTaW5jZVRleHQgPSBNYXRoLmZsb29yKHNlY29uZHMpICsgXCIgc2Vjb25kcyBhZ29cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGltZVNpbmNlVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIsIFsgXCJob21lXCIsIFwibWFuYWdlXCIsIFwibmV0d29ya1wiLCBcImRldmljZVwiIF0pXG4gICAgICAgIC5jb250cm9sbGVyKFwiQXBwQ3RybFwiLCBbIFwiJHNjb3BlXCIsIFwiVGVybWluYWxTZXJ2aWNlXCIsIFwiJHN0YXRlXCIsIFwiJHJvb3RTY29wZVwiLCBcIiR0aW1lb3V0XCIsIGZ1bmN0aW9uIChzY29wZSwgdGVybWluYWxTZXJ2aWNlLCBzdGF0ZSwgcm9vdFNjb3BlLCB0aW1lb3V0KSB7XG5cbiAgICAgICAgICAgIHZhciBzZWxlY3RUYWIgPSBmdW5jdGlvbiAodGFiTmFtZSkge1xuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubWRsLWxheW91dF9fdGFiXCIpO1xuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChlbGVtZW50TGlzdCwgZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoXCJpcy1hY3RpdmVcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmKGVsZW1lbnQuaGFzQ2xhc3ModGFiTmFtZSArIFwiLXRhYlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhcImlzLWFjdGl2ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgc2NvcGUuZ29UbyA9IGZ1bmN0aW9uIChyb3V0ZU5hbWUpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5nbyhyb3V0ZU5hbWUsIHt9LCB7cmVsb2FkOiB0cnVlfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByb290U2NvcGUuJG9uKFwiJHN0YXRlQ2hhbmdlU3RhcnRcIiwgZnVuY3Rpb24gKGV2ZW50LCB0b1N0YXRlLCB0b1BhcmFtcywgZnJvbVN0YXRlLCBmcm9tUGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJvb3RTY29wZS4kb24oXCIkc3RhdGVDaGFuZ2VTdWNjZXNzXCIsIGZ1bmN0aW9uIChldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcykge1xuICAgICAgICAgICAgICAgIHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RUYWIoZnJvbVN0YXRlLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBzY29wZS5jdXJyZW50U3RhdGUgPSB0b1N0YXRlO1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRIYW5kbGVyLnVwZ3JhZGVBbGxSZWdpc3RlcmVkKCk7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByb290U2NvcGUuJG9uKFwiJHN0YXRlQ2hhbmdlRXJyb3JcIiwgZnVuY3Rpb24gKGV2ZW50LCB0b1N0YXRlLCB0b1BhcmFtcywgZnJvbVN0YXRlLCBmcm9tUGFyYW1zLCBlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmKGVycm9yLmdvKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmdvVG8oZXJyb3IuZ28pO1xuICAgICAgICAgICAgICAgICAgICBzY29wZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1dKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgIGFuZ3VsYXIubW9kdWxlKFwiZGV2aWNlXCIsIFsgXCJjb21tb25cIiBdKVxuICAgICAgICAuY29uZmlnKFtcIiRzdGF0ZVByb3ZpZGVyXCIsIFwiJHVybFJvdXRlclByb3ZpZGVyXCIsIFwicmVzb2x2ZVwiLCBmdW5jdGlvbiAoc3RhdGVQcm92aWRlciwgdXJsUm91dGVyUHJvdmlkZXIsIHJlc29sdmUpIHtcbiAgICAgICAgICAgIHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZShcIi9cIik7XG4gICAgICAgICAgICBzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwiZGV2aWNlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9kZXZpY2VcIixcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiZGV2aWNlLmh0bWxcIixcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJEZXZpY2VDdHJsXCIsXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidGVybWluYWxzXCIgOiByZXNvbHZlLnRlcm1pbmFsc1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1dKVxuICAgICAgICAuY29udHJvbGxlcihcIkRldmljZUN0cmxcIiwgWyBcIiRzY29wZVwiLCBcIk5ldHdvcmtTZXJ2aWNlXCIsIFwiJHRpbWVvdXRcIiwgXCIkc3RhdGVcIiwgXCJzZXR0aW5nc1wiLCBmdW5jdGlvbiAoc2NvcGUsIG5ldHdvcmtTZXJ2aWNlLCB0aW1lb3V0LCBzdGF0ZSwgc2V0dGluZ3MpIHtcbiAgICAgICAgICAgIHZhciBkaWFsb2cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2RpYWxvZ1wiKTtcblxuICAgICAgICAgICAgc2NvcGUuc2Nhbk1lc3NhZ2UgPSBcIlNjYW5uaW5nLi4uXCI7XG5cbiAgICAgICAgICAgIHNjb3BlLnNjYW5EZXZpY2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmKHNjb3BlLnRpbWVvdXRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICB0aW1lb3V0LmNhbmNlbChzY29wZS50aW1lb3V0SW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzY29wZS5zY2FuTWVzc2FnZSA9IFwiU2Nhbm5pbmcuLi5cIjtcbiAgICAgICAgICAgICAgICBzY29wZS5zY2FubmluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgbmV0d29ya1NlcnZpY2UuZmluZChmdW5jdGlvbiAoZXJyb3IsIGRldmljZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnNjYW5NZXNzYWdlID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnNjYW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5kZXZpY2VzID0gZGV2aWNlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNjb3BlLmRldmljZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnNjYW5NZXNzYWdlID0gc2NvcGUuZGV2aWNlcy5sZW5ndGggKyBcIiBEZXZpY2VcIiArIChkZXZpY2VzLmxlbmd0aCA+IDEgPyBcInNcIiA6IFwiXCIpICsgXCIgRm91bmRcIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5zY2FuTWVzc2FnZSA9IFwiTm8gRGV2aWNlcyBGb3VuZFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzY29wZS50aW1lb3V0SW5zdGFuY2UgPSB0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuc2NhbkRldmljZXMoKTtcbiAgICAgICAgICAgICAgICB9LCBzZXR0aW5ncy5kZXZpY2VTY2FuSW50ZXJ2YWwpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgc2NvcGUuc2NhbkRldmljZXMoKTtcblxuICAgICAgICAgICAgc2NvcGUuY29ubmVjdERldmljZSA9IGZ1bmN0aW9uIChkZXZpY2VTU0lEKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuc2VsZWN0ZWREZXZpY2UgPSBkZXZpY2VTU0lEO1xuICAgICAgICAgICAgICAgIHNjb3BlLm1lc3NhZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIG5ldHdvcmtTZXJ2aWNlLmNvbm5lY3QoZGV2aWNlU1NJRCwgZnVuY3Rpb24gKGVycm9yLCBjcmVkZW50aWFscykge1xuICAgICAgICAgICAgICAgICAgICBpZihlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUubWVzc2FnZSA9IFwiQ291bGQgbm90IGNvbm5lY3QgdG8gZGV2aWNlXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZy5zaG93TW9kYWwoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLm1lc3NhZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuZ28oXCJuZXR3b3JrXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBzY29wZS5jbG9zZURpYWxvZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBkaWFsb2cuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICBzY29wZS5tZXNzYWdlID0gXCJcIjtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgIGFuZ3VsYXIubW9kdWxlKFwibWFuYWdlXCIsIFsgXCJjb21tb25cIiBdKVxuICAgICAgICAuY29uZmlnKFtcIiRzdGF0ZVByb3ZpZGVyXCIsIFwiJHVybFJvdXRlclByb3ZpZGVyXCIsIFwicmVzb2x2ZVwiLCBmdW5jdGlvbiAoc3RhdGVQcm92aWRlciwgdXJsUm91dGVyUHJvdmlkZXIsIHJlc29sdmUpIHtcbiAgICAgICAgICAgIHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZShcIi9cIik7XG4gICAgICAgICAgICBzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwibWFuYWdlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9tYW5hZ2VcIixcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwibWFuYWdlLmh0bWxcIixcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJNYW5hZ2VDdHJsXCIsXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHJlc29sdmVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfV0pXG4gICAgICAgIC5jb250cm9sbGVyKFwiTWFuYWdlQ3RybFwiLCBbIFwiJHNjb3BlXCIsIFwiVGVybWluYWxTZXJ2aWNlXCIsIFwiTmV0d29ya1NlcnZpY2VcIiwgXCJDb25maWd1cmF0aW9uU2VydmljZVwiLCBcIkRldmljZVNlcnZpY2VcIiwgXCIkdGltZW91dFwiLCBcIiRzdGF0ZVwiLCBmdW5jdGlvbiAoc2NvcGUsIHRlcm1pbmFsU2VydmljZSwgbmV0d29ya1NlcnZpY2UsIGNvbmZpZ3VyYXRpb25TZXJ2aWNlLCBkZXZpY2VTZXJ2aWNlLCB0aW1lb3V0LCBzdGF0ZSkge1xuXG4gICAgICAgICAgICBzY29wZS50ZXJtaW5hbExpc3QgPSB0ZXJtaW5hbFNlcnZpY2UuZ2V0VGVybWluYWxzKCk7XG5cbiAgICAgICAgICAgIHNjb3BlLmhvbWVDcmVkZW50aWFscyA9IGNvbmZpZ3VyYXRpb25TZXJ2aWNlLmdldENyZWRlbnRpYWxzKCk7XG5cbiAgICAgICAgICAgIHNjb3BlLmRldmljZUlkTGlzdCA9IFtdO1xuXG4gICAgICAgICAgICBzY29wZS5zd2l0Y2hMaXN0ID0gW107XG5cbiAgICAgICAgICAgIGRldmljZVNlcnZpY2UuZ2V0RGV2aWNlQ29uZmlndXJhdGlvbigpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuc3dpdGNoTGlzdC5sZW5ndGggPSByZXNwb25zZS5kYXRhLnN3aXRjaENvdW50O1xuICAgICAgICAgICAgICAgIHNjb3BlLmRldmljZUlkTGlzdCA9IHJlc3BvbnNlLmRhdGEuZGV2aWNlSWRMaXN0O1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuZ28oXCJuZXR3b3JrXCIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHNjb3BlLmdldFRlcm1pbmFsUHJvcGVydHkgPSBmdW5jdGlvbiAocHJvcGVydHksIGRldmljZUlkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRlcm1pbmFsSWQgPSAoZGV2aWNlSWQpID8gZGV2aWNlSWQuc3BsaXQoXCIvXCIpWzJdIDogbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHlWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYodGVybWluYWxJZCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIHRlcm1pbmFsSW5kZXggaW4gc2NvcGUudGVybWluYWxMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVybWluYWwgPSBzY29wZS50ZXJtaW5hbExpc3RbdGVybWluYWxJbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0ZXJtaW5hbC50ZXJtaW5hbElkID09PSB0ZXJtaW5hbElkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlWYWx1ZSA9IHRlcm1pbmFsW3Byb3BlcnR5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcGVydHlWYWx1ZTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHNjb3BlLnNldHVwRGV2aWNlID0gZnVuY3Rpb24gKGhvbWVDcmVkZW50aWFscywgZGV2aWNlSWRMaXN0KSB7XG4gICAgICAgICAgICAgICAgZGV2aWNlSWRMaXN0ID0gZGV2aWNlSWRMaXN0Lm1hcChmdW5jdGlvbiAoZGV2aWNlSWQsIGRldmljZUlkSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChkZXZpY2VJZCA/IGRldmljZUlkIDogXCIvL1wiKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBkZXZpY2VTZXJ2aWNlLmNvbmZpZ3VyZURldmljZShob21lQ3JlZGVudGlhbHMsIGRldmljZUlkTGlzdCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJDb25maWd1cmF0aW9uIFN1Y2Nlc3NcIik7XG4gICAgICAgICAgICAgICAgICAgIG5ldHdvcmtTZXJ2aWNlLnJlc3RvcmUoaG9tZUNyZWRlbnRpYWxzLCBmdW5jdGlvbiAoZXJyb3IsIGNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5nbyhcImhvbWVcIik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNvbmZpZ3VyYXRpb24gRmFpbGVkXCIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgc2NvcGUudG9nZ2xlU3dpdGNoID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgZGV2aWNlU2VydmljZS50ZXN0U3dpdGNoKGluZGV4KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlN3aXRjaCBpcyB0dXJuZWQgXCIgKyAoKHJlc3BvbnNlLmRhdGEuc3RhdGUgPT09IDEpID8gXCJvblwiIDogXCJvZmZcIikpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVuYWJsZSB0byBhY2Nlc3Mgc3dpdGNoXCIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgYW5ndWxhci5tb2R1bGUoXCJuZXR3b3JrXCIsIFsgXCJjb21tb25cIiBdKVxuICAgICAgICAuY29uZmlnKFtcIiRzdGF0ZVByb3ZpZGVyXCIsIFwiJHVybFJvdXRlclByb3ZpZGVyXCIsIFwicmVzb2x2ZVwiLCBmdW5jdGlvbiAoc3RhdGVQcm92aWRlciwgdXJsUm91dGVyUHJvdmlkZXIsIHJlc29sdmUpIHtcbiAgICAgICAgICAgIHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZShcIi9cIik7XG4gICAgICAgICAgICBzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwibmV0d29ya1wiLCB7XG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvbmV0d29ya1wiLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJuZXR3b3JrLmh0bWxcIixcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJOZXR3b3JrQ3RybFwiLFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInRlcm1pbmFsc1wiIDogcmVzb2x2ZS50ZXJtaW5hbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRldmljZVwiIDogcmVzb2x2ZS5kZXZpY2VcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XSlcbiAgICAgICAgLmNvbnRyb2xsZXIoXCJOZXR3b3JrQ3RybFwiLCBbIFwiJHNjb3BlXCIsIFwiRGV2aWNlU2VydmljZVwiLCBcIkNvbmZpZ3VyYXRpb25TZXJ2aWNlXCIsIFwiJHRpbWVvdXRcIiwgXCIkc3RhdGVcIiwgXCJzZXR0aW5nc1wiLCBmdW5jdGlvbiAoc2NvcGUsIGRldmljZVNlcnZpY2UsIGNvbmZpZ3VyYXRpb25TZXJ2aWNlLCB0aW1lb3V0LCBzdGF0ZSwgc2V0dGluZ3MpIHtcblxuICAgICAgICAgICAgc2NvcGUuc2Nhbk1lc3NhZ2UgPSBcIlNjYW5uaW5nLi4uXCI7XG5cbiAgICAgICAgICAgIHNjb3BlLmNyZWRlbnRpYWxzID0gY29uZmlndXJhdGlvblNlcnZpY2UuZ2V0Q3JlZGVudGlhbHMoKTtcblxuICAgICAgICAgICAgdmFyIG5ldHdvcmtQYXNzd29yZERpYWxvZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbmV0d29ya1Bhc3N3b3JkRGlhbG9nXCIpO1xuXG4gICAgICAgICAgICBzY29wZS5jaGFuZ2VOZXR3b3JrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHNjb3BlLnNjYW5OZXR3b3JrcygpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgc2NvcGUuc2Nhbk5ldHdvcmtzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmKHNjb3BlLnRpbWVvdXRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICB0aW1lb3V0LmNhbmNlbChzY29wZS50aW1lb3V0SW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzY29wZS5zY2FuTWVzc2FnZSA9IFwiU2Nhbm5pbmcuLi5cIjtcbiAgICAgICAgICAgICAgICBzY29wZS5zY2FubmluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZGV2aWNlU2VydmljZS5zY2FuTmV0d29ya3MoKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBzY29wZS5zY2FubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBzY29wZS5uZXR3b3JrcyA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIGlmKHNjb3BlLm5ldHdvcmtzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnNjYW5NZXNzYWdlID0gc2NvcGUubmV0d29ya3MubGVuZ3RoICsgXCIgTmV0d29ya1wiICsgKHNjb3BlLm5ldHdvcmtzLmxlbmd0aCA+IDEgPyBcInNcIiA6IFwiXCIpICsgXCIgRm91bmRcIjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnNjYW5NZXNzYWdlID0gXCJObyBOZXR3b3JrcyBGb3VuZFwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICBzY29wZS5zY2FuTWVzc2FnZSA9IFwiRmFpbGVkIHRvIHNjYW4gbmV0d29ya3NcIjtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihyZWplY3QpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNjb3BlLnRpbWVvdXRJbnN0YW5jZSA9IHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzY29wZS5zY2FuTmV0d29ya3MoKTtcbiAgICAgICAgICAgICAgICB9LCBzZXR0aW5ncy5uZXR3b3JrU2NhbkludGVydmFsKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHNjb3BlLiRvbihcIiRkZXN0cm95XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aW1lb3V0LmNhbmNlbChzY29wZS50aW1lb3V0SW5zdGFuY2UpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHNjb3BlLnNjYW5OZXR3b3JrcygpO1xuXG4gICAgICAgICAgICBzY29wZS5vcGVuTmV0d29ya1Bhc3N3b3JkTW9kYWwgPSBmdW5jdGlvbiAobmV0d29ya1NTSUQpIHtcbiAgICAgICAgICAgICAgICBzY29wZS5zZWxlY3RlZE5ldHdvcmsgPSBuZXR3b3JrU1NJRDtcbiAgICAgICAgICAgICAgICBzY29wZS5jb25uZWN0TWVzc2FnZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgbmV0d29ya1Bhc3N3b3JkRGlhbG9nLnNob3dNb2RhbCgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgc2NvcGUudGVzdE5ldHdvcmsgPSBmdW5jdGlvbiAocGFzc3dvcmQpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3JlZGVudGlhbHMgPSB7IHNzaWQgOiBzY29wZS5zZWxlY3RlZE5ldHdvcmssIHBhc3N3b3JkIDogcGFzc3dvcmQgfTtcbiAgICAgICAgICAgICAgICBkZXZpY2VTZXJ2aWNlLnRlc3ROZXR3b3JrKGNyZWRlbnRpYWxzKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBzY29wZS5jb25uZWN0TWVzc2FnZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmNyZWRlbnRpYWxzID0gY29uZmlndXJhdGlvblNlcnZpY2Uuc2V0Q3JlZGVudGlhbHMoY3JlZGVudGlhbHMpO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5nbyhcIm1hbmFnZVwiKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmNvbm5lY3RNZXNzYWdlID0gXCJVbmFibGUgdG8gY29ubmVjdCB0byBuZXR3b3JrLCB2ZXJpZnkgcGFzc3dvcmRcIjtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihyZWplY3QpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgc2NvcGUuY2xvc2VOZXR3b3JrUGFzc3dvcmREaWFsb2cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUucGFzc3dvcmQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIHNjb3BlLmNvbm5lY3RNZXNzYWdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBuZXR3b3JrUGFzc3dvcmREaWFsb2cuY2xvc2UoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbn0pKCk7XG4iXX0=
